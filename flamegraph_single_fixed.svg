<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="838" onload="init(evt)" viewBox="0 0 1200 838" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="838" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="821.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="821.00"> </text><svg id="frames" x="10" width="1180" total_samples="19"><g><title>__kdebug_trace_string (1 samples, 5.26%)</title><rect x="0.0000%" y="725" width="5.2632%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="735.50">__kdeb..</text></g><g><title>dyld4::APIs::runAllInitializersForMain() (1 samples, 5.26%)</title><rect x="5.2632%" y="725" width="5.2632%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="5.5132%" y="735.50">dyld4:..</text></g><g><title>dyld4::Loader::runInitializersBottomUpPlusUpwardLinks(dyld4::RuntimeState&amp;) const (1 samples, 5.26%)</title><rect x="5.2632%" y="709" width="5.2632%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="5.5132%" y="719.50">dyld4:..</text></g><g><title>dyld4::Loader::runInitializersBottomUpPlusUpwardLinks(dyld4::RuntimeState&amp;) const::$_0::operator()() const (1 samples, 5.26%)</title><rect x="5.2632%" y="693" width="5.2632%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="5.5132%" y="703.50">dyld4:..</text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (1 samples, 5.26%)</title><rect x="5.2632%" y="677" width="5.2632%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="1"/><text x="5.5132%" y="687.50">dyld4:..</text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (1 samples, 5.26%)</title><rect x="5.2632%" y="661" width="5.2632%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="1"/><text x="5.5132%" y="671.50">dyld4:..</text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (1 samples, 5.26%)</title><rect x="5.2632%" y="645" width="5.2632%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="1"/><text x="5.5132%" y="655.50">dyld4:..</text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (1 samples, 5.26%)</title><rect x="5.2632%" y="629" width="5.2632%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="1"/><text x="5.5132%" y="639.50">dyld4:..</text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (1 samples, 5.26%)</title><rect x="5.2632%" y="613" width="5.2632%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="1"/><text x="5.5132%" y="623.50">dyld4:..</text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (1 samples, 5.26%)</title><rect x="5.2632%" y="597" width="5.2632%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="1"/><text x="5.5132%" y="607.50">dyld4:..</text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (1 samples, 5.26%)</title><rect x="5.2632%" y="581" width="5.2632%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="1"/><text x="5.5132%" y="591.50">dyld4:..</text></g><g><title>dyld4::RuntimeState::notifyObjCInit(dyld4::Loader const*) (1 samples, 5.26%)</title><rect x="5.2632%" y="565" width="5.2632%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="1"/><text x="5.5132%" y="575.50">dyld4:..</text></g><g><title>load_images (1 samples, 5.26%)</title><rect x="5.2632%" y="549" width="5.2632%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="1"/><text x="5.5132%" y="559.50">load_i..</text></g><g><title>_NSInitializePlatform (1 samples, 5.26%)</title><rect x="5.2632%" y="533" width="5.2632%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="1"/><text x="5.5132%" y="543.50">_NSIni..</text></g><g><title>@objc static _NSSwiftProcessInfo.processInfo.getter (1 samples, 5.26%)</title><rect x="5.2632%" y="517" width="5.2632%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="1"/><text x="5.5132%" y="527.50">@objc ..</text></g><g><title>_dispatch_once_callout (1 samples, 5.26%)</title><rect x="5.2632%" y="501" width="5.2632%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="1"/><text x="5.5132%" y="511.50">_dispa..</text></g><g><title>_dispatch_client_callout (1 samples, 5.26%)</title><rect x="5.2632%" y="485" width="5.2632%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="1"/><text x="5.5132%" y="495.50">_dispa..</text></g><g><title>one-time initialization function for _shared (1 samples, 5.26%)</title><rect x="5.2632%" y="469" width="5.2632%" height="15" fill="rgb(210,31,41)" fg:x="1" fg:w="1"/><text x="5.5132%" y="479.50">one-ti..</text></g><g><title>@objc _NSSwiftProcessInfo.init() (1 samples, 5.26%)</title><rect x="5.2632%" y="453" width="5.2632%" height="15" fill="rgb(221,200,47)" fg:x="1" fg:w="1"/><text x="5.5132%" y="463.50">@objc ..</text></g><g><title>_NSSwiftProcessInfo.init() (1 samples, 5.26%)</title><rect x="5.2632%" y="437" width="5.2632%" height="15" fill="rgb(226,26,5)" fg:x="1" fg:w="1"/><text x="5.5132%" y="447.50">_NSSwi..</text></g><g><title>_dispatch_once_callout (1 samples, 5.26%)</title><rect x="5.2632%" y="421" width="5.2632%" height="15" fill="rgb(249,33,26)" fg:x="1" fg:w="1"/><text x="5.5132%" y="431.50">_dispa..</text></g><g><title>_dispatch_client_callout (1 samples, 5.26%)</title><rect x="5.2632%" y="405" width="5.2632%" height="15" fill="rgb(235,183,28)" fg:x="1" fg:w="1"/><text x="5.5132%" y="415.50">_dispa..</text></g><g><title>one-time initialization function for processInfo (1 samples, 5.26%)</title><rect x="5.2632%" y="389" width="5.2632%" height="15" fill="rgb(221,5,38)" fg:x="1" fg:w="1"/><text x="5.5132%" y="399.50">one-ti..</text></g><g><title>__swift_instantiateConcreteTypeFromMangledName (1 samples, 5.26%)</title><rect x="5.2632%" y="373" width="5.2632%" height="15" fill="rgb(247,18,42)" fg:x="1" fg:w="1"/><text x="5.5132%" y="383.50">__swif..</text></g><g><title>swift_getTypeByMangledNameInContextImpl(char const*, unsigned long, swift::TargetContextDescriptor&lt;swift::InProcess&gt; const*, void const* const*) (1 samples, 5.26%)</title><rect x="5.2632%" y="357" width="5.2632%" height="15" fill="rgb(241,131,45)" fg:x="1" fg:w="1"/><text x="5.5132%" y="367.50">swift_..</text></g><g><title>swift_getTypeByMangledName (1 samples, 5.26%)</title><rect x="5.2632%" y="341" width="5.2632%" height="15" fill="rgb(249,31,29)" fg:x="1" fg:w="1"/><text x="5.5132%" y="351.50">swift_..</text></g><g><title>swift_getTypeByMangledNameImpl(swift::MetadataRequest, __swift::__runtime::llvm::StringRef, void const* const*, std::__1::function&lt;void const* (unsigned int, unsigned int)&gt;, std::__1::function&lt;swift::TargetWitnessTable&lt;swift::InProcess&gt; const* (swift::TargetMetadata&lt;swift::InProcess&gt; const*, unsigned int)&gt;) (1 samples, 5.26%)</title><rect x="5.2632%" y="325" width="5.2632%" height="15" fill="rgb(225,111,53)" fg:x="1" fg:w="1"/><text x="5.5132%" y="335.50">swift_..</text></g><g><title>swift_getTypeByMangledNode (1 samples, 5.26%)</title><rect x="5.2632%" y="309" width="5.2632%" height="15" fill="rgb(238,160,17)" fg:x="1" fg:w="1"/><text x="5.5132%" y="319.50">swift_..</text></g><g><title>swift_getTypeByMangledNodeImpl(swift::MetadataRequest, swift::Demangle::__runtime::Demangler&amp;, swift::Demangle::__runtime::Node*, void const* const*, std::__1::function&lt;void const* (unsigned int, unsigned int)&gt;, std::__1::function&lt;swift::TargetWitnessTable&lt;swift::InProcess&gt; const* (swift::TargetMetadata&lt;swift::InProcess&gt; const*, unsigned int)&gt;) (1 samples, 5.26%)</title><rect x="5.2632%" y="293" width="5.2632%" height="15" fill="rgb(214,148,48)" fg:x="1" fg:w="1"/><text x="5.5132%" y="303.50">swift_..</text></g><g><title>swift::Demangle::__runtime::TypeDecoder&lt;(anonymous namespace)::DecodedMetadataBuilder&gt;::decodeMangledType(swift::Demangle::__runtime::Node*, unsigned int, bool) (1 samples, 5.26%)</title><rect x="5.2632%" y="277" width="5.2632%" height="15" fill="rgb(232,36,49)" fg:x="1" fg:w="1"/><text x="5.5132%" y="287.50">swift:..</text></g><g><title>(anonymous namespace)::DecodedMetadataBuilder::createBoundGenericType(swift::TargetContextDescriptor&lt;swift::InProcess&gt; const*, __swift::__runtime::llvm::ArrayRef&lt;swift::MetadataOrPack&gt;, swift::MetadataOrPack) const (1 samples, 5.26%)</title><rect x="5.2632%" y="261" width="5.2632%" height="15" fill="rgb(209,103,24)" fg:x="1" fg:w="1"/><text x="5.5132%" y="271.50">(anony..</text></g><g><title>__swift_instantiateGenericMetadata (1 samples, 5.26%)</title><rect x="5.2632%" y="245" width="5.2632%" height="15" fill="rgb(229,88,8)" fg:x="1" fg:w="1"/><text x="5.5132%" y="255.50">__swif..</text></g><g><title>_swift_getGenericMetadata(swift::MetadataRequest, void const* const*, swift::TargetTypeContextDescriptor&lt;swift::InProcess&gt; const*) (1 samples, 5.26%)</title><rect x="5.2632%" y="229" width="5.2632%" height="15" fill="rgb(213,181,19)" fg:x="1" fg:w="1"/><text x="5.5132%" y="239.50">_swift..</text></g><g><title>swift::MetadataCacheEntryBase&lt;(anonymous namespace)::GenericCacheEntry, void const*&gt;::doInitialization(swift::MetadataWaitQueue::Worker&amp;, swift::MetadataRequest) (1 samples, 5.26%)</title><rect x="5.2632%" y="213" width="5.2632%" height="15" fill="rgb(254,191,54)" fg:x="1" fg:w="1"/><text x="5.5132%" y="223.50">swift:..</text></g><g><title>type metadata completion function for LockedState._Buffer (1 samples, 5.26%)</title><rect x="5.2632%" y="197" width="5.2632%" height="15" fill="rgb(241,83,37)" fg:x="1" fg:w="1"/><text x="5.5132%" y="207.50">type m..</text></g><g><title>_swift_initClassMetadataImpl(swift::TargetClassMetadata&lt;swift::InProcess, swift::TargetAnyClassMetadataObjCInterop&lt;swift::InProcess&gt;&gt;*, swift::ClassLayoutFlags, unsigned long, swift::TargetTypeLayout&lt;swift::InProcess&gt; const* const*, unsigned long*, bool) (1 samples, 5.26%)</title><rect x="5.2632%" y="181" width="5.2632%" height="15" fill="rgb(233,36,39)" fg:x="1" fg:w="1"/><text x="5.5132%" y="191.50">_swift..</text></g><g><title>getSuperclassMetadata (1 samples, 5.26%)</title><rect x="5.2632%" y="165" width="5.2632%" height="15" fill="rgb(226,3,54)" fg:x="1" fg:w="1"/><text x="5.5132%" y="175.50">getSup..</text></g><g><title>swift_getTypeByMangledName (1 samples, 5.26%)</title><rect x="5.2632%" y="149" width="5.2632%" height="15" fill="rgb(245,192,40)" fg:x="1" fg:w="1"/><text x="5.5132%" y="159.50">swift_..</text></g><g><title>swift_getTypeByMangledNameImpl(swift::MetadataRequest, __swift::__runtime::llvm::StringRef, void const* const*, std::__1::function&lt;void const* (unsigned int, unsigned int)&gt;, std::__1::function&lt;swift::TargetWitnessTable&lt;swift::InProcess&gt; const* (swift::TargetMetadata&lt;swift::InProcess&gt; const*, unsigned int)&gt;) (1 samples, 5.26%)</title><rect x="5.2632%" y="133" width="5.2632%" height="15" fill="rgb(238,167,29)" fg:x="1" fg:w="1"/><text x="5.5132%" y="143.50">swift_..</text></g><g><title>swift_getTypeByMangledNode (1 samples, 5.26%)</title><rect x="5.2632%" y="117" width="5.2632%" height="15" fill="rgb(232,182,51)" fg:x="1" fg:w="1"/><text x="5.5132%" y="127.50">swift_..</text></g><g><title>swift_getTypeByMangledNodeImpl(swift::MetadataRequest, swift::Demangle::__runtime::Demangler&amp;, swift::Demangle::__runtime::Node*, void const* const*, std::__1::function&lt;void const* (unsigned int, unsigned int)&gt;, std::__1::function&lt;swift::TargetWitnessTable&lt;swift::InProcess&gt; const* (swift::TargetMetadata&lt;swift::InProcess&gt; const*, unsigned int)&gt;) (1 samples, 5.26%)</title><rect x="5.2632%" y="101" width="5.2632%" height="15" fill="rgb(231,60,39)" fg:x="1" fg:w="1"/><text x="5.5132%" y="111.50">swift_..</text></g><g><title>swift::Demangle::__runtime::TypeDecoder&lt;(anonymous namespace)::DecodedMetadataBuilder&gt;::decodeMangledType(swift::Demangle::__runtime::Node*, unsigned int, bool) (1 samples, 5.26%)</title><rect x="5.2632%" y="85" width="5.2632%" height="15" fill="rgb(208,69,12)" fg:x="1" fg:w="1"/><text x="5.5132%" y="95.50">swift:..</text></g><g><title>swift::Demangle::__runtime::TypeDecoder&lt;(anonymous namespace)::DecodedMetadataBuilder&gt;::decodeGenericArgs(swift::Demangle::__runtime::Node*, unsigned int, __swift::__runtime::llvm::SmallVectorImpl&lt;swift::MetadataOrPack&gt;&amp;) (1 samples, 5.26%)</title><rect x="5.2632%" y="69" width="5.2632%" height="15" fill="rgb(235,93,37)" fg:x="1" fg:w="1"/><text x="5.5132%" y="79.50">swift:..</text></g><g><title>swift::Demangle::__runtime::TypeDecoder&lt;(anonymous namespace)::DecodedMetadataBuilder&gt;::decodeMangledType(swift::Demangle::__runtime::Node*, unsigned int, bool) (1 samples, 5.26%)</title><rect x="5.2632%" y="53" width="5.2632%" height="15" fill="rgb(213,116,39)" fg:x="1" fg:w="1"/><text x="5.5132%" y="63.50">swift:..</text></g><g><title>_findContextDescriptor(swift::Demangle::__runtime::Node*, swift::Demangle::__runtime::Demangler&amp;) (1 samples, 5.26%)</title><rect x="5.2632%" y="37" width="5.2632%" height="15" fill="rgb(222,207,29)" fg:x="1" fg:w="1"/><text x="5.5132%" y="47.50">_findC..</text></g><g><title>dyld4::Loader::applyFixupsGeneric(Diagnostics&amp;, dyld4::RuntimeState&amp;, unsigned long long, dyld3::Array&lt;void const*&gt; const&amp;, dyld3::Array&lt;void const*&gt; const&amp;, bool, dyld3::Array&lt;dyld4::Loader::MissingFlatLazySymbol&gt; const&amp;) const (1 samples, 5.26%)</title><rect x="10.5263%" y="709" width="5.2632%" height="15" fill="rgb(206,96,30)" fg:x="2" fg:w="1"/><text x="10.7763%" y="719.50">dyld4:..</text></g><g><title>dyld3::MachOAnalyzer::forEachRebaseLocation_Opcodes(Diagnostics&amp;, void (unsigned long long, bool&amp;) block_pointer) const (1 samples, 5.26%)</title><rect x="10.5263%" y="693" width="5.2632%" height="15" fill="rgb(218,138,4)" fg:x="2" fg:w="1"/><text x="10.7763%" y="703.50">dyld3:..</text></g><g><title>dyld3::MachOAnalyzer::forEachRebase_Opcodes(Diagnostics&amp;, dyld3::MachOLoaded::LinkEditInfo const&amp;, dyld3::MachOFile::SegmentInfo const*, void (char const*, dyld3::MachOLoaded::LinkEditInfo const&amp;, dyld3::MachOFile::SegmentInfo const*, bool, unsigned int, unsigned char, unsigned long long, dyld3::MachOAnalyzer::Rebase, bool&amp;) block_pointer) const (1 samples, 5.26%)</title><rect x="10.5263%" y="677" width="5.2632%" height="15" fill="rgb(250,191,14)" fg:x="2" fg:w="1"/><text x="10.7763%" y="687.50">dyld3:..</text></g><g><title>invocation function for block in dyld4::Loader::applyFixupsGeneric(Diagnostics&amp;, dyld4::RuntimeState&amp;, unsigned long long, dyld3::Array&lt;void const*&gt; const&amp;, dyld3::Array&lt;void const*&gt; const&amp;, bool, dyld3::Array&lt;dyld4::Loader::MissingFlatLazySymbol&gt; const&amp;) const (1 samples, 5.26%)</title><rect x="10.5263%" y="661" width="5.2632%" height="15" fill="rgb(239,60,40)" fg:x="2" fg:w="1"/><text x="10.7763%" y="671.50">invoca..</text></g><g><title>dyld4::JustInTimeLoader::applyFixups(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::DyldCacheDataConstLazyScopedWriter&amp;, bool, lsl::Vector&lt;std::__1::pair&lt;dyld4::Loader const*, char const*&gt;&gt;*) const (2 samples, 10.53%)</title><rect x="10.5263%" y="725" width="10.5263%" height="15" fill="rgb(206,27,48)" fg:x="2" fg:w="2"/><text x="10.7763%" y="735.50">dyld4::JustInTi..</text></g><g><title>dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 5.26%)</title><rect x="15.7895%" y="709" width="5.2632%" height="15" fill="rgb(225,35,8)" fg:x="3" fg:w="1"/><text x="16.0395%" y="719.50">dyld4:..</text></g><g><title>dyld3::MachOAnalyzer::withVMLayout(Diagnostics&amp;, void (mach_o::Layout const&amp;) block_pointer) const (1 samples, 5.26%)</title><rect x="15.7895%" y="693" width="5.2632%" height="15" fill="rgb(250,213,24)" fg:x="3" fg:w="1"/><text x="16.0395%" y="703.50">dyld3:..</text></g><g><title>invocation function for block in dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 5.26%)</title><rect x="15.7895%" y="677" width="5.2632%" height="15" fill="rgb(247,123,22)" fg:x="3" fg:w="1"/><text x="16.0395%" y="687.50">invoca..</text></g><g><title>mach_o::Fixups::forEachBindTarget_Opcodes(Diagnostics&amp;, bool, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 5.26%)</title><rect x="15.7895%" y="661" width="5.2632%" height="15" fill="rgb(231,138,38)" fg:x="3" fg:w="1"/><text x="16.0395%" y="671.50">mach_o..</text></g><g><title>mach_o::Fixups::forEachBindUnified_Opcodes(Diagnostics&amp;, bool, void (unsigned long long, unsigned int, mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (unsigned long long, unsigned int, mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 5.26%)</title><rect x="15.7895%" y="645" width="5.2632%" height="15" fill="rgb(231,145,46)" fg:x="3" fg:w="1"/><text x="16.0395%" y="655.50">mach_o..</text></g><g><title>mach_o::Fixups::forEachBind_OpcodesLazy(Diagnostics&amp;, void (char const*, bool, bool, unsigned int, int, unsigned int, unsigned int, unsigned long long, unsigned char, char const*, bool, bool, unsigned long long, bool, bool&amp;) block_pointer) const (1 samples, 5.26%)</title><rect x="15.7895%" y="629" width="5.2632%" height="15" fill="rgb(251,118,11)" fg:x="3" fg:w="1"/><text x="16.0395%" y="639.50">mach_o..</text></g><g><title>invocation function for block in mach_o::Fixups::forEachBindTarget_Opcodes(Diagnostics&amp;, bool, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 5.26%)</title><rect x="15.7895%" y="613" width="5.2632%" height="15" fill="rgb(217,147,25)" fg:x="3" fg:w="1"/><text x="16.0395%" y="623.50">invoca..</text></g><g><title>invocation function for block in dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 5.26%)</title><rect x="15.7895%" y="597" width="5.2632%" height="15" fill="rgb(247,81,37)" fg:x="3" fg:w="1"/><text x="16.0395%" y="607.50">invoca..</text></g><g><title>dyld4::Loader::resolveSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, int, char const*, bool, bool, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool) const (1 samples, 5.26%)</title><rect x="15.7895%" y="581" width="5.2632%" height="15" fill="rgb(209,12,38)" fg:x="3" fg:w="1"/><text x="16.0395%" y="591.50">dyld4:..</text></g><g><title>dyld4::Loader::hasExportedSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::ExportedSymbolMode, dyld4::Loader::ResolverMode, dyld4::Loader::ResolvedSymbol*, dyld3::Array&lt;dyld4::Loader const*&gt;*) const (1 samples, 5.26%)</title><rect x="15.7895%" y="565" width="5.2632%" height="15" fill="rgb(227,1,9)" fg:x="3" fg:w="1"/><text x="16.0395%" y="575.50">dyld4:..</text></g><g><title>dyld4::Loader::hasExportedSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::ExportedSymbolMode, dyld4::Loader::ResolverMode, dyld4::Loader::ResolvedSymbol*, dyld3::Array&lt;dyld4::Loader const*&gt;*) const (1 samples, 5.26%)</title><rect x="15.7895%" y="549" width="5.2632%" height="15" fill="rgb(248,47,43)" fg:x="3" fg:w="1"/><text x="16.0395%" y="559.50">dyld4:..</text></g><g><title>dyld3::MachOFile::trieWalk(Diagnostics&amp;, unsigned char const*, unsigned char const*, char const*) (1 samples, 5.26%)</title><rect x="15.7895%" y="533" width="5.2632%" height="15" fill="rgb(221,10,30)" fg:x="3" fg:w="1"/><text x="16.0395%" y="543.50">dyld3:..</text></g><g><title>dyld4::start(dyld4::KernelArgs*, void*, void*)::$_0::operator()() const (5 samples, 26.32%)</title><rect x="0.0000%" y="757" width="26.3158%" height="15" fill="rgb(210,229,1)" fg:x="0" fg:w="5"/><text x="0.2500%" y="767.50">dyld4::start(dyld4::KernelArgs*, void*, vo..</text></g><g><title>dyld4::prepare(dyld4::APIs&amp;, dyld3::MachOAnalyzer const*) (5 samples, 26.32%)</title><rect x="0.0000%" y="741" width="26.3158%" height="15" fill="rgb(222,148,37)" fg:x="0" fg:w="5"/><text x="0.2500%" y="751.50">dyld4::prepare(dyld4::APIs&amp;, dyld3::MachOA..</text></g><g><title>dyld4::JustInTimeLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 5.26%)</title><rect x="21.0526%" y="725" width="5.2632%" height="15" fill="rgb(234,67,33)" fg:x="4" fg:w="1"/><text x="21.3026%" y="735.50">dyld4:..</text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 5.26%)</title><rect x="21.0526%" y="709" width="5.2632%" height="15" fill="rgb(247,98,35)" fg:x="4" fg:w="1"/><text x="21.3026%" y="719.50">dyld4:..</text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 5.26%)</title><rect x="21.0526%" y="693" width="5.2632%" height="15" fill="rgb(247,138,52)" fg:x="4" fg:w="1"/><text x="21.3026%" y="703.50">dyld4:..</text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 5.26%)</title><rect x="21.0526%" y="677" width="5.2632%" height="15" fill="rgb(213,79,30)" fg:x="4" fg:w="1"/><text x="21.3026%" y="687.50">dyld4:..</text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 5.26%)</title><rect x="21.0526%" y="661" width="5.2632%" height="15" fill="rgb(246,177,23)" fg:x="4" fg:w="1"/><text x="21.3026%" y="671.50">dyld4:..</text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 5.26%)</title><rect x="21.0526%" y="645" width="5.2632%" height="15" fill="rgb(230,62,27)" fg:x="4" fg:w="1"/><text x="21.3026%" y="655.50">dyld4:..</text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 5.26%)</title><rect x="21.0526%" y="629" width="5.2632%" height="15" fill="rgb(216,154,8)" fg:x="4" fg:w="1"/><text x="21.3026%" y="639.50">dyld4:..</text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 5.26%)</title><rect x="21.0526%" y="613" width="5.2632%" height="15" fill="rgb(244,35,45)" fg:x="4" fg:w="1"/><text x="21.3026%" y="623.50">dyld4:..</text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 5.26%)</title><rect x="21.0526%" y="597" width="5.2632%" height="15" fill="rgb(251,115,12)" fg:x="4" fg:w="1"/><text x="21.3026%" y="607.50">dyld4:..</text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 5.26%)</title><rect x="21.0526%" y="581" width="5.2632%" height="15" fill="rgb(240,54,50)" fg:x="4" fg:w="1"/><text x="21.3026%" y="591.50">dyld4:..</text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 5.26%)</title><rect x="21.0526%" y="565" width="5.2632%" height="15" fill="rgb(233,84,52)" fg:x="4" fg:w="1"/><text x="21.3026%" y="575.50">dyld4:..</text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 5.26%)</title><rect x="21.0526%" y="549" width="5.2632%" height="15" fill="rgb(207,117,47)" fg:x="4" fg:w="1"/><text x="21.3026%" y="559.50">dyld4:..</text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 5.26%)</title><rect x="21.0526%" y="533" width="5.2632%" height="15" fill="rgb(249,43,39)" fg:x="4" fg:w="1"/><text x="21.3026%" y="543.50">dyld4:..</text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 5.26%)</title><rect x="21.0526%" y="517" width="5.2632%" height="15" fill="rgb(209,38,44)" fg:x="4" fg:w="1"/><text x="21.3026%" y="527.50">dyld4:..</text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 5.26%)</title><rect x="21.0526%" y="501" width="5.2632%" height="15" fill="rgb(236,212,23)" fg:x="4" fg:w="1"/><text x="21.3026%" y="511.50">dyld4:..</text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 5.26%)</title><rect x="21.0526%" y="485" width="5.2632%" height="15" fill="rgb(242,79,21)" fg:x="4" fg:w="1"/><text x="21.3026%" y="495.50">dyld4:..</text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 5.26%)</title><rect x="21.0526%" y="469" width="5.2632%" height="15" fill="rgb(211,96,35)" fg:x="4" fg:w="1"/><text x="21.3026%" y="479.50">dyld4:..</text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 5.26%)</title><rect x="21.0526%" y="453" width="5.2632%" height="15" fill="rgb(253,215,40)" fg:x="4" fg:w="1"/><text x="21.3026%" y="463.50">dyld4:..</text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 5.26%)</title><rect x="21.0526%" y="437" width="5.2632%" height="15" fill="rgb(211,81,21)" fg:x="4" fg:w="1"/><text x="21.3026%" y="447.50">dyld4:..</text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 5.26%)</title><rect x="21.0526%" y="421" width="5.2632%" height="15" fill="rgb(208,190,38)" fg:x="4" fg:w="1"/><text x="21.3026%" y="431.50">dyld4:..</text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 5.26%)</title><rect x="21.0526%" y="405" width="5.2632%" height="15" fill="rgb(235,213,38)" fg:x="4" fg:w="1"/><text x="21.3026%" y="415.50">dyld4:..</text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 5.26%)</title><rect x="21.0526%" y="389" width="5.2632%" height="15" fill="rgb(237,122,38)" fg:x="4" fg:w="1"/><text x="21.3026%" y="399.50">dyld4:..</text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 5.26%)</title><rect x="21.0526%" y="373" width="5.2632%" height="15" fill="rgb(244,218,35)" fg:x="4" fg:w="1"/><text x="21.3026%" y="383.50">dyld4:..</text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 5.26%)</title><rect x="21.0526%" y="357" width="5.2632%" height="15" fill="rgb(240,68,47)" fg:x="4" fg:w="1"/><text x="21.3026%" y="367.50">dyld4:..</text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 5.26%)</title><rect x="21.0526%" y="341" width="5.2632%" height="15" fill="rgb(210,16,53)" fg:x="4" fg:w="1"/><text x="21.3026%" y="351.50">dyld4:..</text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 5.26%)</title><rect x="21.0526%" y="325" width="5.2632%" height="15" fill="rgb(235,124,12)" fg:x="4" fg:w="1"/><text x="21.3026%" y="335.50">dyld4:..</text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 5.26%)</title><rect x="21.0526%" y="309" width="5.2632%" height="15" fill="rgb(224,169,11)" fg:x="4" fg:w="1"/><text x="21.3026%" y="319.50">dyld4:..</text></g><g><title>dyld4::PrebuiltLoader::loadDependents(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) (1 samples, 5.26%)</title><rect x="21.0526%" y="293" width="5.2632%" height="15" fill="rgb(250,166,2)" fg:x="4" fg:w="1"/><text x="21.3026%" y="303.50">dyld4:..</text></g><g><title>dyld4::PrebuiltLoader::map(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::Loader::LoadOptions const&amp;) const (1 samples, 5.26%)</title><rect x="21.0526%" y="277" width="5.2632%" height="15" fill="rgb(242,216,29)" fg:x="4" fg:w="1"/><text x="21.3026%" y="287.50">dyld4:..</text></g><g><title>dyld4::RuntimeState::add(dyld4::Loader const*) (1 samples, 5.26%)</title><rect x="21.0526%" y="261" width="5.2632%" height="15" fill="rgb(230,116,27)" fg:x="4" fg:w="1"/><text x="21.3026%" y="271.50">dyld4:..</text></g><g><title>lsl::Vector&lt;AuthenticatedValue&lt;dyld4::PseudoDylib*&gt;&gt;::reserveExact(unsigned long long) (1 samples, 5.26%)</title><rect x="21.0526%" y="245" width="5.2632%" height="15" fill="rgb(228,99,48)" fg:x="4" fg:w="1"/><text x="21.3026%" y="255.50">lsl::V..</text></g><g><title>lsl::Allocator::aligned_alloc(unsigned long long, unsigned long long) (1 samples, 5.26%)</title><rect x="21.0526%" y="229" width="5.2632%" height="15" fill="rgb(253,11,6)" fg:x="4" fg:w="1"/><text x="21.3026%" y="239.50">lsl::A..</text></g><g><title>lsl::Allocator::Pool::aligned_alloc(unsigned long long, unsigned long long) (1 samples, 5.26%)</title><rect x="21.0526%" y="213" width="5.2632%" height="15" fill="rgb(247,143,39)" fg:x="4" fg:w="1"/><text x="21.3026%" y="223.50">lsl::A..</text></g><g><title>lsl::Allocator::AllocationMetadata::AllocationMetadata(lsl::Allocator::AllocationMetadata*, unsigned long long, unsigned long long, unsigned long long) (1 samples, 5.26%)</title><rect x="21.0526%" y="197" width="5.2632%" height="15" fill="rgb(236,97,10)" fg:x="4" fg:w="1"/><text x="21.3026%" y="207.50">lsl::A..</text></g><g><title>clap_builder::builder::command::Command::new::new_inner (1 samples, 5.26%)</title><rect x="26.3158%" y="677" width="5.2632%" height="15" fill="rgb(233,208,19)" fg:x="5" fg:w="1"/><text x="26.5658%" y="687.50">clap_b..</text></g><g><title>core::mem::drop (1 samples, 5.26%)</title><rect x="31.5789%" y="677" width="5.2632%" height="15" fill="rgb(216,164,2)" fg:x="6" fg:w="1"/><text x="31.8289%" y="687.50">core::..</text></g><g><title>core::ptr::mut_ptr::_&lt;impl *mut T&gt;::drop_in_place (1 samples, 5.26%)</title><rect x="31.5789%" y="661" width="5.2632%" height="15" fill="rgb(220,129,5)" fg:x="6" fg:w="1"/><text x="31.8289%" y="671.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;mysql::conn::pool::PooledConn&gt;&gt; (1 samples, 5.26%)</title><rect x="31.5789%" y="645" width="5.2632%" height="15" fill="rgb(242,17,10)" fg:x="6" fg:w="1"/><text x="31.8289%" y="655.50">core::..</text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 5.26%)</title><rect x="31.5789%" y="629" width="5.2632%" height="15" fill="rgb(242,107,0)" fg:x="6" fg:w="1"/><text x="31.8289%" y="639.50">alloc:..</text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 5.26%)</title><rect x="31.5789%" y="613" width="5.2632%" height="15" fill="rgb(251,28,31)" fg:x="6" fg:w="1"/><text x="31.8289%" y="623.50">&lt;alloc..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;mysql::conn::ConnInner&gt;&gt; (1 samples, 5.26%)</title><rect x="31.5789%" y="597" width="5.2632%" height="15" fill="rgb(233,223,10)" fg:x="6" fg:w="1"/><text x="31.8289%" y="607.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;mysql::io::Stream&gt;&gt;&gt; (1 samples, 5.26%)</title><rect x="31.5789%" y="581" width="5.2632%" height="15" fill="rgb(215,21,27)" fg:x="6" fg:w="1"/><text x="31.8289%" y="591.50">core::..</text></g><g><title>free_medium (1 samples, 5.26%)</title><rect x="31.5789%" y="565" width="5.2632%" height="15" fill="rgb(232,23,21)" fg:x="6" fg:w="1"/><text x="31.8289%" y="575.50">free_m..</text></g><g><title>madvise (1 samples, 5.26%)</title><rect x="31.5789%" y="549" width="5.2632%" height="15" fill="rgb(244,5,23)" fg:x="6" fg:w="1"/><text x="31.8289%" y="559.50">madvise</text></g><g><title>__posix_spawn (1 samples, 5.26%)</title><rect x="36.8421%" y="597" width="5.2632%" height="15" fill="rgb(226,81,46)" fg:x="7" fg:w="1"/><text x="37.0921%" y="607.50">__posi..</text></g><g><title>dingo_test_runner::report::EnvironmentInfo::get_git_commit (2 samples, 10.53%)</title><rect x="36.8421%" y="661" width="10.5263%" height="15" fill="rgb(247,70,30)" fg:x="7" fg:w="2"/><text x="37.0921%" y="671.50">dingo_test_runn..</text></g><g><title>std::process::Command::output (2 samples, 10.53%)</title><rect x="36.8421%" y="645" width="10.5263%" height="15" fill="rgb(212,68,19)" fg:x="7" fg:w="2"/><text x="37.0921%" y="655.50">std::process::C..</text></g><g><title>std::sys::process::unix::unix::_&lt;impl std::sys::process::unix::common::Command&gt;::spawn (2 samples, 10.53%)</title><rect x="36.8421%" y="629" width="10.5263%" height="15" fill="rgb(240,187,13)" fg:x="7" fg:w="2"/><text x="37.0921%" y="639.50">std::sys::proce..</text></g><g><title>posix_spawnp (2 samples, 10.53%)</title><rect x="36.8421%" y="613" width="10.5263%" height="15" fill="rgb(223,113,26)" fg:x="7" fg:w="2"/><text x="37.0921%" y="623.50">posix_spawnp</text></g><g><title>posix_spawn (1 samples, 5.26%)</title><rect x="42.1053%" y="597" width="5.2632%" height="15" fill="rgb(206,192,2)" fg:x="8" fg:w="1"/><text x="42.3553%" y="607.50">posix_..</text></g><g><title>mysql::conn::Conn::continue_auth (1 samples, 5.26%)</title><rect x="47.3684%" y="533" width="5.2632%" height="15" fill="rgb(241,108,4)" fg:x="9" fg:w="1"/><text x="47.6184%" y="543.50">mysql:..</text></g><g><title>core::ptr::drop_in_place&lt;mysql::buffer_pool::enabled::Buffer&gt; (1 samples, 5.26%)</title><rect x="47.3684%" y="517" width="5.2632%" height="15" fill="rgb(247,173,49)" fg:x="9" fg:w="1"/><text x="47.6184%" y="527.50">core::..</text></g><g><title>mysql::conn::Conn::read_packet (1 samples, 5.26%)</title><rect x="52.6316%" y="533" width="5.2632%" height="15" fill="rgb(224,114,35)" fg:x="10" fg:w="1"/><text x="52.8816%" y="543.50">mysql:..</text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::next_packet (1 samples, 5.26%)</title><rect x="52.6316%" y="517" width="5.2632%" height="15" fill="rgb(245,159,27)" fg:x="10" fg:w="1"/><text x="52.8816%" y="527.50">mysql_..</text></g><g><title>__recvfrom (1 samples, 5.26%)</title><rect x="52.6316%" y="501" width="5.2632%" height="15" fill="rgb(245,172,44)" fg:x="10" fg:w="1"/><text x="52.8816%" y="511.50">__recv..</text></g><g><title>dingo_test_runner::tester::tester::Tester::new (3 samples, 15.79%)</title><rect x="47.3684%" y="661" width="15.7895%" height="15" fill="rgb(236,23,11)" fg:x="9" fg:w="3"/><text x="47.6184%" y="671.50">dingo_test_runner::teste..</text></g><g><title>dingo_test_runner::tester::connection_manager::ConnectionManager::new (3 samples, 15.79%)</title><rect x="47.3684%" y="645" width="15.7895%" height="15" fill="rgb(205,117,38)" fg:x="9" fg:w="3"/><text x="47.6184%" y="655.50">dingo_test_runner::teste..</text></g><g><title>dingo_test_runner::tester::database::MySQLDatabase::new (3 samples, 15.79%)</title><rect x="47.3684%" y="629" width="15.7895%" height="15" fill="rgb(237,72,25)" fg:x="9" fg:w="3"/><text x="47.6184%" y="639.50">dingo_test_runner::teste..</text></g><g><title>mysql::conn::pool::Pool::new (3 samples, 15.79%)</title><rect x="47.3684%" y="613" width="15.7895%" height="15" fill="rgb(244,70,9)" fg:x="9" fg:w="3"/><text x="47.6184%" y="623.50">mysql::conn::pool::Pool:..</text></g><g><title>mysql::conn::pool::inner::Inner::new (3 samples, 15.79%)</title><rect x="47.3684%" y="597" width="15.7895%" height="15" fill="rgb(217,125,39)" fg:x="9" fg:w="3"/><text x="47.6184%" y="607.50">mysql::conn::pool::inner..</text></g><g><title>mysql::conn::pool::inner::Protected::new_conn (3 samples, 15.79%)</title><rect x="47.3684%" y="581" width="15.7895%" height="15" fill="rgb(235,36,10)" fg:x="9" fg:w="3"/><text x="47.6184%" y="591.50">mysql::conn::pool::inner..</text></g><g><title>mysql::conn::Conn::new (3 samples, 15.79%)</title><rect x="47.3684%" y="565" width="15.7895%" height="15" fill="rgb(251,123,47)" fg:x="9" fg:w="3"/><text x="47.6184%" y="575.50">mysql::conn::Conn::new</text></g><g><title>mysql::conn::Conn::connect (3 samples, 15.79%)</title><rect x="47.3684%" y="549" width="15.7895%" height="15" fill="rgb(221,13,13)" fg:x="9" fg:w="3"/><text x="47.6184%" y="559.50">mysql::conn::Conn::conne..</text></g><g><title>mysql_common::packets::HandshakePacket::server_version_parsed (1 samples, 5.26%)</title><rect x="57.8947%" y="533" width="5.2632%" height="15" fill="rgb(238,131,9)" fg:x="11" fg:w="1"/><text x="58.1447%" y="543.50">mysql_..</text></g><g><title>std::sys::sync::once::queue::Once::call (1 samples, 5.26%)</title><rect x="57.8947%" y="517" width="5.2632%" height="15" fill="rgb(211,50,8)" fg:x="11" fg:w="1"/><text x="58.1447%" y="527.50">std::s..</text></g><g><title>std::sync::poison::once::Once::call_once::_{{closure}} (1 samples, 5.26%)</title><rect x="57.8947%" y="501" width="5.2632%" height="15" fill="rgb(245,182,24)" fg:x="11" fg:w="1"/><text x="58.1447%" y="511.50">std::s..</text></g><g><title>regex::regex::bytes::Regex::new (1 samples, 5.26%)</title><rect x="57.8947%" y="485" width="5.2632%" height="15" fill="rgb(242,14,37)" fg:x="11" fg:w="1"/><text x="58.1447%" y="495.50">regex:..</text></g><g><title>regex::builders::Builder::build_one_bytes (1 samples, 5.26%)</title><rect x="57.8947%" y="469" width="5.2632%" height="15" fill="rgb(246,228,12)" fg:x="11" fg:w="1"/><text x="58.1447%" y="479.50">regex:..</text></g><g><title>regex_automata::meta::regex::Builder::build (1 samples, 5.26%)</title><rect x="57.8947%" y="453" width="5.2632%" height="15" fill="rgb(213,55,15)" fg:x="11" fg:w="1"/><text x="58.1447%" y="463.50">regex_..</text></g><g><title>regex_automata::meta::strategy::new (1 samples, 5.26%)</title><rect x="57.8947%" y="437" width="5.2632%" height="15" fill="rgb(209,9,3)" fg:x="11" fg:w="1"/><text x="58.1447%" y="447.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (1 samples, 5.26%)</title><rect x="57.8947%" y="421" width="5.2632%" height="15" fill="rgb(230,59,30)" fg:x="11" fg:w="1"/><text x="58.1447%" y="431.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::clear (1 samples, 5.26%)</title><rect x="57.8947%" y="405" width="5.2632%" height="15" fill="rgb(209,121,21)" fg:x="11" fg:w="1"/><text x="58.1447%" y="415.50">regex_..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;mysql::conn::pool::PooledConn&gt;&gt; (1 samples, 5.26%)</title><rect x="63.1579%" y="629" width="5.2632%" height="15" fill="rgb(220,109,13)" fg:x="12" fg:w="1"/><text x="63.4079%" y="639.50">core::..</text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 5.26%)</title><rect x="63.1579%" y="613" width="5.2632%" height="15" fill="rgb(232,18,1)" fg:x="12" fg:w="1"/><text x="63.4079%" y="623.50">&lt;alloc..</text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 5.26%)</title><rect x="63.1579%" y="597" width="5.2632%" height="15" fill="rgb(215,41,42)" fg:x="12" fg:w="1"/><text x="63.4079%" y="607.50">alloc:..</text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 5.26%)</title><rect x="63.1579%" y="581" width="5.2632%" height="15" fill="rgb(224,123,36)" fg:x="12" fg:w="1"/><text x="63.4079%" y="591.50">&lt;alloc..</text></g><g><title>close (1 samples, 5.26%)</title><rect x="63.1579%" y="565" width="5.2632%" height="15" fill="rgb(240,125,3)" fg:x="12" fg:w="1"/><text x="63.4079%" y="575.50">close</text></g><g><title>dingo_test_runner::tester::tester::Tester::post_process (2 samples, 10.53%)</title><rect x="63.1579%" y="661" width="10.5263%" height="15" fill="rgb(205,98,50)" fg:x="12" fg:w="2"/><text x="63.4079%" y="671.50">dingo_test_runn..</text></g><g><title>dingo_test_runner::tester::database::MySQLDatabase::cleanup_after_test (2 samples, 10.53%)</title><rect x="63.1579%" y="645" width="10.5263%" height="15" fill="rgb(205,185,37)" fg:x="12" fg:w="2"/><text x="63.4079%" y="655.50">dingo_test_runn..</text></g><g><title>dingo_test_runner::tester::database::MySQLDatabase::switch_database (1 samples, 5.26%)</title><rect x="68.4211%" y="629" width="5.2632%" height="15" fill="rgb(238,207,15)" fg:x="13" fg:w="1"/><text x="68.6711%" y="639.50">dingo_..</text></g><g><title>mysql::conn::pool::Pool::new (1 samples, 5.26%)</title><rect x="68.4211%" y="613" width="5.2632%" height="15" fill="rgb(213,199,42)" fg:x="13" fg:w="1"/><text x="68.6711%" y="623.50">mysql:..</text></g><g><title>mysql::conn::pool::inner::Inner::new (1 samples, 5.26%)</title><rect x="68.4211%" y="597" width="5.2632%" height="15" fill="rgb(235,201,11)" fg:x="13" fg:w="1"/><text x="68.6711%" y="607.50">mysql:..</text></g><g><title>mysql::conn::pool::inner::Protected::new_conn (1 samples, 5.26%)</title><rect x="68.4211%" y="581" width="5.2632%" height="15" fill="rgb(207,46,11)" fg:x="13" fg:w="1"/><text x="68.6711%" y="591.50">mysql:..</text></g><g><title>mysql::conn::Conn::new (1 samples, 5.26%)</title><rect x="68.4211%" y="565" width="5.2632%" height="15" fill="rgb(241,35,35)" fg:x="13" fg:w="1"/><text x="68.6711%" y="575.50">mysql:..</text></g><g><title>mysql::conn::Conn::connect_stream (1 samples, 5.26%)</title><rect x="68.4211%" y="549" width="5.2632%" height="15" fill="rgb(243,32,47)" fg:x="13" fg:w="1"/><text x="68.6711%" y="559.50">mysql:..</text></g><g><title>mysql::io::Stream::connect_socket (1 samples, 5.26%)</title><rect x="68.4211%" y="533" width="5.2632%" height="15" fill="rgb(247,202,23)" fg:x="13" fg:w="1"/><text x="68.6711%" y="543.50">mysql:..</text></g><g><title>std::os::unix::net::stream::UnixStream::connect (1 samples, 5.26%)</title><rect x="68.4211%" y="517" width="5.2632%" height="15" fill="rgb(219,102,11)" fg:x="13" fg:w="1"/><text x="68.6711%" y="527.50">std::o..</text></g><g><title>setsockopt (1 samples, 5.26%)</title><rect x="68.4211%" y="501" width="5.2632%" height="15" fill="rgb(243,110,44)" fg:x="13" fg:w="1"/><text x="68.6711%" y="511.50">setsoc..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;mysql::conn::pool::PooledConn&gt;&gt; (1 samples, 5.26%)</title><rect x="73.6842%" y="629" width="5.2632%" height="15" fill="rgb(222,74,54)" fg:x="14" fg:w="1"/><text x="73.9342%" y="639.50">core::..</text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 5.26%)</title><rect x="73.6842%" y="613" width="5.2632%" height="15" fill="rgb(216,99,12)" fg:x="14" fg:w="1"/><text x="73.9342%" y="623.50">&lt;alloc..</text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 5.26%)</title><rect x="73.6842%" y="597" width="5.2632%" height="15" fill="rgb(226,22,26)" fg:x="14" fg:w="1"/><text x="73.9342%" y="607.50">alloc:..</text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 5.26%)</title><rect x="73.6842%" y="581" width="5.2632%" height="15" fill="rgb(217,163,10)" fg:x="14" fg:w="1"/><text x="73.9342%" y="591.50">&lt;alloc..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;mysql::conn::ConnInner&gt;&gt; (1 samples, 5.26%)</title><rect x="73.6842%" y="565" width="5.2632%" height="15" fill="rgb(213,25,53)" fg:x="14" fg:w="1"/><text x="73.9342%" y="575.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;mysql::io::Stream&gt;&gt;&gt; (1 samples, 5.26%)</title><rect x="73.6842%" y="549" width="5.2632%" height="15" fill="rgb(252,105,26)" fg:x="14" fg:w="1"/><text x="73.9342%" y="559.50">core::..</text></g><g><title>free_medium (1 samples, 5.26%)</title><rect x="73.6842%" y="533" width="5.2632%" height="15" fill="rgb(220,39,43)" fg:x="14" fg:w="1"/><text x="73.9342%" y="543.50">free_m..</text></g><g><title>madvise (1 samples, 5.26%)</title><rect x="73.6842%" y="517" width="5.2632%" height="15" fill="rgb(229,68,48)" fg:x="14" fg:w="1"/><text x="73.9342%" y="527.50">madvise</text></g><g><title>mysql::conn::Conn::connect (1 samples, 5.26%)</title><rect x="78.9474%" y="549" width="5.2632%" height="15" fill="rgb(252,8,32)" fg:x="15" fg:w="1"/><text x="79.1974%" y="559.50">mysql:..</text></g><g><title>mysql::conn::Conn::read_packet (1 samples, 5.26%)</title><rect x="78.9474%" y="533" width="5.2632%" height="15" fill="rgb(223,20,43)" fg:x="15" fg:w="1"/><text x="79.1974%" y="543.50">mysql:..</text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::next_packet (1 samples, 5.26%)</title><rect x="78.9474%" y="517" width="5.2632%" height="15" fill="rgb(229,81,49)" fg:x="15" fg:w="1"/><text x="79.1974%" y="527.50">mysql_..</text></g><g><title>__recvfrom (1 samples, 5.26%)</title><rect x="78.9474%" y="501" width="5.2632%" height="15" fill="rgb(236,28,36)" fg:x="15" fg:w="1"/><text x="79.1974%" y="511.50">__recv..</text></g><g><title>all (19 samples, 100%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(249,185,26)" fg:x="0" fg:w="19"/><text x="0.2500%" y="799.50"></text></g><g><title>start (19 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(249,174,33)" fg:x="0" fg:w="19"/><text x="0.2500%" y="783.50">start</text></g><g><title>main (14 samples, 73.68%)</title><rect x="26.3158%" y="757" width="73.6842%" height="15" fill="rgb(233,201,37)" fg:x="5" fg:w="14"/><text x="26.5658%" y="767.50">main</text></g><g><title>std::rt::lang_start_internal (14 samples, 73.68%)</title><rect x="26.3158%" y="741" width="73.6842%" height="15" fill="rgb(221,78,26)" fg:x="5" fg:w="14"/><text x="26.5658%" y="751.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (14 samples, 73.68%)</title><rect x="26.3158%" y="725" width="73.6842%" height="15" fill="rgb(250,127,30)" fg:x="5" fg:w="14"/><text x="26.5658%" y="735.50">std::rt::lang_start::_{{closure}}</text></g><g><title>core::ops::function::FnOnce::call_once (14 samples, 73.68%)</title><rect x="26.3158%" y="709" width="73.6842%" height="15" fill="rgb(230,49,44)" fg:x="5" fg:w="14"/><text x="26.5658%" y="719.50">core::ops::function::FnOnce::call_once</text></g><g><title>dingo_test_runner::main (14 samples, 73.68%)</title><rect x="26.3158%" y="693" width="73.6842%" height="15" fill="rgb(229,67,23)" fg:x="5" fg:w="14"/><text x="26.5658%" y="703.50">dingo_test_runner::main</text></g><g><title>dingo_test_runner::executor::file_executor::FileExecutor::execute_serial (12 samples, 63.16%)</title><rect x="36.8421%" y="677" width="63.1579%" height="15" fill="rgb(249,83,47)" fg:x="7" fg:w="12"/><text x="37.0921%" y="687.50">dingo_test_runner::executor::file_executor::FileExecutor::execute_serial</text></g><g><title>dingo_test_runner::tester::tester::Tester::pre_process (5 samples, 26.32%)</title><rect x="73.6842%" y="661" width="26.3158%" height="15" fill="rgb(215,43,3)" fg:x="14" fg:w="5"/><text x="73.9342%" y="671.50">dingo_test_runner::tester::tester::Tester:..</text></g><g><title>dingo_test_runner::tester::database::MySQLDatabase::init_for_test (5 samples, 26.32%)</title><rect x="73.6842%" y="645" width="26.3158%" height="15" fill="rgb(238,154,13)" fg:x="14" fg:w="5"/><text x="73.9342%" y="655.50">dingo_test_runner::tester::database::MySQL..</text></g><g><title>dingo_test_runner::tester::database::MySQLDatabase::switch_database (4 samples, 21.05%)</title><rect x="78.9474%" y="629" width="21.0526%" height="15" fill="rgb(219,56,2)" fg:x="15" fg:w="4"/><text x="79.1974%" y="639.50">dingo_test_runner::tester::databa..</text></g><g><title>mysql::conn::pool::Pool::new (4 samples, 21.05%)</title><rect x="78.9474%" y="613" width="21.0526%" height="15" fill="rgb(233,0,4)" fg:x="15" fg:w="4"/><text x="79.1974%" y="623.50">mysql::conn::pool::Pool::new</text></g><g><title>mysql::conn::pool::inner::Inner::new (4 samples, 21.05%)</title><rect x="78.9474%" y="597" width="21.0526%" height="15" fill="rgb(235,30,7)" fg:x="15" fg:w="4"/><text x="79.1974%" y="607.50">mysql::conn::pool::inner::Inner::..</text></g><g><title>mysql::conn::pool::inner::Protected::new_conn (4 samples, 21.05%)</title><rect x="78.9474%" y="581" width="21.0526%" height="15" fill="rgb(250,79,13)" fg:x="15" fg:w="4"/><text x="79.1974%" y="591.50">mysql::conn::pool::inner::Protect..</text></g><g><title>mysql::conn::Conn::new (4 samples, 21.05%)</title><rect x="78.9474%" y="565" width="21.0526%" height="15" fill="rgb(211,146,34)" fg:x="15" fg:w="4"/><text x="79.1974%" y="575.50">mysql::conn::Conn::new</text></g><g><title>mysql::conn::Conn::connect_stream (3 samples, 15.79%)</title><rect x="84.2105%" y="549" width="15.7895%" height="15" fill="rgb(228,22,38)" fg:x="16" fg:w="3"/><text x="84.4605%" y="559.50">mysql::conn::Conn::conne..</text></g><g><title>mysql::io::Stream::connect_tcp (3 samples, 15.79%)</title><rect x="84.2105%" y="533" width="15.7895%" height="15" fill="rgb(235,168,5)" fg:x="16" fg:w="3"/><text x="84.4605%" y="543.50">mysql::io::Stream::conne..</text></g><g><title>mysql::io::tcp::MyTcpBuilder&lt;T&gt;::connect (3 samples, 15.79%)</title><rect x="84.2105%" y="517" width="15.7895%" height="15" fill="rgb(221,155,16)" fg:x="16" fg:w="3"/><text x="84.4605%" y="527.50">mysql::io::tcp::MyTcpBui..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 15.79%)</title><rect x="84.2105%" y="501" width="15.7895%" height="15" fill="rgb(215,215,53)" fg:x="16" fg:w="3"/><text x="84.4605%" y="511.50">&lt;alloc::vec::into_iter::..</text></g><g><title>__connect (3 samples, 15.79%)</title><rect x="84.2105%" y="485" width="15.7895%" height="15" fill="rgb(223,4,10)" fg:x="16" fg:w="3"/><text x="84.4605%" y="495.50">__connect</text></g></svg></svg>