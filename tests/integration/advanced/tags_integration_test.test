# 标签功能集成测试
--echo Testing tag functionality integration scenarios

# 测试标签与变量系统集成
--echo Testing tags with variable system integration
let $table_prefix = integration_test;
let $error_code = 1146;

CREATE TABLE ${table_prefix}_data (
    id INT PRIMARY KEY,
    name VARCHAR(50),
    value DECIMAL(10,2)
);

INSERT INTO ${table_prefix}_data VALUES 
    (101, 'Item A', 25.50),
    (102, 'Item B', 37.75),
    (103, 'Item C', 42.00);

# 使用变量控制 replace_regex
--replace_regex /[0-9]+/ID/
SELECT * FROM ${table_prefix}_data;

# 测试变量与错误处理集成
--error $error_code
SELECT * FROM ${table_prefix}_nonexistent;

# 测试标签与控制流集成
--echo Testing tags with control flow integration
let $enable_logging = 1;
let $sort_results = 1;

if ($enable_logging)
{
    --enable_query_log
    --enable_result_log
    --echo Logging enabled through control flow
}
end

if ($sort_results)
{
    --sorted_result
    SELECT name, value FROM ${table_prefix}_data;
}
end

# 测试标签与 source 指令集成
--echo Testing tags with source directive integration
--source t/include/setup_test_data.inc

# 测试标签与连接管理集成
--echo Testing tags with connection management integration
--connect (conn1, localhost, root, , test)
--connection conn1
--disable_query_log
SELECT 'Connected to conn1' as connection_test;
--enable_query_log

--connection default
SELECT 'Back to default connection' as connection_test;

--disconnect conn1

# 测试标签与事务集成
--echo Testing tags with transaction integration
START TRANSACTION;

--disable_result_log
INSERT INTO ${table_prefix}_data VALUES (104, 'Item D', 15.25);
--enable_result_log

--sorted_result
SELECT * FROM ${table_prefix}_data WHERE id >= 104;

ROLLBACK;

# 验证回滚后的状态
--sorted_result
SELECT * FROM ${table_prefix}_data WHERE id >= 104;

# 测试标签与存储过程集成
--echo Testing tags with stored procedures integration
DELIMITER //
CREATE PROCEDURE test_procedure(IN test_id INT)
BEGIN
    SELECT CONCAT('Processing ID: ', test_id) as proc_result;
END//
DELIMITER ;

--replace_regex /[0-9]+/NUM/
CALL test_procedure(12345);

DROP PROCEDURE test_procedure;

# 测试标签与函数集成
--echo Testing tags with functions integration
CREATE TABLE function_test (
    id INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

INSERT INTO function_test (id) VALUES (1), (2), (3);

# 替换时间戳以保证结果一致性
--replace_regex /[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}/TIMESTAMP/
SELECT id, created_at FROM function_test;

DROP TABLE function_test;

# 测试标签与触发器集成
--echo Testing tags with triggers integration
CREATE TABLE trigger_test (
    id INT PRIMARY KEY,
    name VARCHAR(50),
    audit_log TEXT
);

CREATE TRIGGER audit_trigger
BEFORE INSERT ON trigger_test
FOR EACH ROW
SET NEW.audit_log = CONCAT('Inserted at: ', NOW());

--replace_regex /[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}/TIMESTAMP/
INSERT INTO trigger_test (id, name) VALUES (1, 'Test Item');

--replace_regex /[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}/TIMESTAMP/
SELECT * FROM trigger_test;

DROP TRIGGER audit_trigger;
DROP TABLE trigger_test;

# 测试标签与视图集成
--echo Testing tags with views integration
CREATE VIEW ${table_prefix}_view AS
SELECT id, name, value * 1.1 as adjusted_value
FROM ${table_prefix}_data;

--sorted_result
SELECT * FROM ${table_prefix}_view;

--replace_regex /[0-9]+\.[0-9]+/DECIMAL/
SELECT adjusted_value FROM ${table_prefix}_view WHERE id = 101;

DROP VIEW ${table_prefix}_view;

# 测试标签与索引集成
--echo Testing tags with index integration
CREATE INDEX idx_name ON ${table_prefix}_data (name);

--sorted_result
SELECT name FROM ${table_prefix}_data WHERE name LIKE 'Item%';

DROP INDEX idx_name ON ${table_prefix}_data;

# 清理测试数据
DROP TABLE ${table_prefix}_data;

--echo Tag functionality integration test completed!