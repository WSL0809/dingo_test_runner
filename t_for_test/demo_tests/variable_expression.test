# Test let statement with expression evaluation
# This test verifies that let statements can evaluate arithmetic, logical, and SQL expressions

# Basic arithmetic expressions
let $a = 5
let $b = 3
let $sum = $a + $b
let $diff = $a - $b
let $product = $a * $b
let $quotient = $a / $b

--echo Basic arithmetic results:
--echo Sum: $sum (should be 8)
--echo Difference: $diff (should be 2)
--echo Product: $product (should be 15)
--echo Quotient: $quotient (should be 1.6666666666666667)

# Logical expressions
let $greater = $a > $b
let $equal = $a == $b
let $and_result = $a > 0 && $b > 0
let $or_result = $a > 10 || $b > 0

--echo Logical results:
--echo Greater: $greater (should be 1)
--echo Equal: $equal (should be 0)
--echo AND result: $and_result (should be 1)
--echo OR result: $or_result (should be 1)

# String concatenation (if supported by evalexpr)
let $greeting = "Hello"
let $name = "World"
# Note: String concatenation might not work with evalexpr, will fall back to literal

# Complex expressions
let $complex = ($a + $b) * 2
let $nested = $a > $b && ($sum > 7)

--echo Complex results:
--echo Complex: $complex (should be 16)
--echo Nested: $nested (should be 1)

# SQL expressions with backticks
create table if not exists test_table (id int, value int);
insert into test_table values (1, 10), (2, 20), (3, 30);

let $count = `select count(*) from test_table`
let $max_value = `select max(value) from test_table`
let $calculated = $count * 10 + $max_value

--echo SQL results:
--echo Count: $count (should be 3)
--echo Max value: $max_value (should be 30)
--echo Calculated: $calculated (should be 60)

# Fallback to literal strings for non-evaluable expressions
let $literal = hello world with spaces
let $mixed = some text $a more text

--echo Fallback results:
--echo Literal: $literal (should be "hello world with spaces")
--echo Mixed: $mixed (should be "some text 5 more text")

# Clean up
drop table if exists test_table; 