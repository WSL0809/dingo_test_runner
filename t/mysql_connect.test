# MySQL 连接管理功能测试
# 测试真实 MySQL 环境下的 --connect, --disconnect, --connection 功能

--echo 开始 MySQL 连接管理测试

# 测试当前默认连接
SELECT CONNECTION_ID() as default_connection_id;
SELECT DATABASE() as default_database;

--echo 创建新连接 conn1 到同一MySQL实例的不同数据库
--connect (conn1,127.0.0.1,root,123456,mysql,3306)

# 在新连接中执行查询
SELECT CONNECTION_ID() as conn1_connection_id;
SELECT DATABASE() as conn1_database;

# 创建一个测试表
DROP TABLE IF EXISTS conn1_test;
CREATE TABLE conn1_test (id INT PRIMARY KEY, msg VARCHAR(100));
INSERT INTO conn1_test VALUES (1, 'from_conn1');

--echo 创建第二个连接 conn2
--connect (conn2,127.0.0.1,root,123456,information_schema,3306)

# 在 conn2 中执行查询
SELECT CONNECTION_ID() as conn2_connection_id;
SELECT DATABASE() as conn2_database;

--echo 切换回 conn1 验证连接状态
--connection conn1

SELECT * FROM conn1_test;
SELECT DATABASE() as current_db_should_be_mysql;

--echo 切换到 conn2
--connection conn2

# 查询一些系统表
SELECT COUNT(*) as table_count FROM TABLES LIMIT 5;

--echo 切换回默认连接
--connection default

SELECT DATABASE() as back_to_default_db;

--echo 注意：连接错误将直接导致测试失败，这是预期行为
# 在实际使用中，连接失败应该通过测试框架来捕获和处理
# 这里我们先注释掉这些会失败的连接，专注于成功的连接管理功能

# --connect (bad_db_conn,127.0.0.1,root,123456,nonexistent_db,3306)
# --connect (bad_auth_conn,127.0.0.1,invalid_user,invalid_pass,mysql,3306)

--echo 断开 conn1 连接
--disconnect conn1

--echo 尝试切换到已断开的连接（应该报错）
# 注意：这将导致测试失败，这是预期的行为
# --connection conn1

--echo 切换到 conn2 进行清理
--connection conn2

--echo 断开 conn2
--disconnect conn2

--echo 确认回到默认连接
SELECT DATABASE() as final_default_db;

--echo MySQL 连接管理测试完成 