<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="582" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="565.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="565.00"> </text><svg id="frames" x="10" width="1180" total_samples="37"><g><title>0x10566d897 (1 samples, 2.70%)</title><rect x="0.0000%" y="517" width="2.7027%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="527.50">0x..</text></g><g><title>0x1056c436b (1 samples, 2.70%)</title><rect x="0.0000%" y="501" width="2.7027%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="511.50">0x..</text></g><g><title>0x10566e8bf (1 samples, 2.70%)</title><rect x="0.0000%" y="485" width="2.7027%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="495.50">0x..</text></g><g><title>0x1056bc5cb (1 samples, 2.70%)</title><rect x="0.0000%" y="469" width="2.7027%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="479.50">0x..</text></g><g><title>0x1056bc62f (1 samples, 2.70%)</title><rect x="0.0000%" y="453" width="2.7027%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="463.50">0x..</text></g><g><title>0x1056bc8f7 (1 samples, 2.70%)</title><rect x="0.0000%" y="437" width="2.7027%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="447.50">0x..</text></g><g><title>0x1056b7d7b (1 samples, 2.70%)</title><rect x="0.0000%" y="421" width="2.7027%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="431.50">0x..</text></g><g><title>0x1056bc7e5 (1 samples, 2.70%)</title><rect x="0.0000%" y="405" width="2.7027%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="415.50">0x..</text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (1 samples, 2.70%)</title><rect x="5.4054%" y="373" width="2.7027%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="1"/><text x="5.6554%" y="383.50">dy..</text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (1 samples, 2.70%)</title><rect x="5.4054%" y="357" width="2.7027%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="1"/><text x="5.6554%" y="367.50">dy..</text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (1 samples, 2.70%)</title><rect x="5.4054%" y="341" width="2.7027%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="1"/><text x="5.6554%" y="351.50">dy..</text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (1 samples, 2.70%)</title><rect x="5.4054%" y="325" width="2.7027%" height="15" fill="rgb(240,193,28)" fg:x="2" fg:w="1"/><text x="5.6554%" y="335.50">dy..</text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (1 samples, 2.70%)</title><rect x="5.4054%" y="309" width="2.7027%" height="15" fill="rgb(216,20,37)" fg:x="2" fg:w="1"/><text x="5.6554%" y="319.50">dy..</text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (1 samples, 2.70%)</title><rect x="5.4054%" y="293" width="2.7027%" height="15" fill="rgb(206,188,39)" fg:x="2" fg:w="1"/><text x="5.6554%" y="303.50">dy..</text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (1 samples, 2.70%)</title><rect x="5.4054%" y="277" width="2.7027%" height="15" fill="rgb(217,207,13)" fg:x="2" fg:w="1"/><text x="5.6554%" y="287.50">dy..</text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (1 samples, 2.70%)</title><rect x="5.4054%" y="261" width="2.7027%" height="15" fill="rgb(231,73,38)" fg:x="2" fg:w="1"/><text x="5.6554%" y="271.50">dy..</text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (1 samples, 2.70%)</title><rect x="5.4054%" y="245" width="2.7027%" height="15" fill="rgb(225,20,46)" fg:x="2" fg:w="1"/><text x="5.6554%" y="255.50">dy..</text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (1 samples, 2.70%)</title><rect x="5.4054%" y="229" width="2.7027%" height="15" fill="rgb(210,31,41)" fg:x="2" fg:w="1"/><text x="5.6554%" y="239.50">dy..</text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (1 samples, 2.70%)</title><rect x="5.4054%" y="213" width="2.7027%" height="15" fill="rgb(221,200,47)" fg:x="2" fg:w="1"/><text x="5.6554%" y="223.50">dy..</text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (1 samples, 2.70%)</title><rect x="5.4054%" y="197" width="2.7027%" height="15" fill="rgb(226,26,5)" fg:x="2" fg:w="1"/><text x="5.6554%" y="207.50">dy..</text></g><g><title>dyld4::PrebuiltLoader::runInitializers(dyld4::RuntimeState&amp;) const (1 samples, 2.70%)</title><rect x="5.4054%" y="181" width="2.7027%" height="15" fill="rgb(249,33,26)" fg:x="2" fg:w="1"/><text x="5.6554%" y="191.50">dy..</text></g><g><title>dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (1 samples, 2.70%)</title><rect x="5.4054%" y="165" width="2.7027%" height="15" fill="rgb(235,183,28)" fg:x="2" fg:w="1"/><text x="5.6554%" y="175.50">dy..</text></g><g><title>dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (1 samples, 2.70%)</title><rect x="5.4054%" y="149" width="2.7027%" height="15" fill="rgb(221,5,38)" fg:x="2" fg:w="1"/><text x="5.6554%" y="159.50">dy..</text></g><g><title>dyld3::MachOFile::forEachSection(void (dyld3::MachOFile::SectionInfo const&amp;, bool, bool&amp;) block_pointer) const (1 samples, 2.70%)</title><rect x="5.4054%" y="133" width="2.7027%" height="15" fill="rgb(247,18,42)" fg:x="2" fg:w="1"/><text x="5.6554%" y="143.50">dy..</text></g><g><title>dyld3::MachOFile::forEachLoadCommand(Diagnostics&amp;, void (load_command const*, bool&amp;) block_pointer) const (1 samples, 2.70%)</title><rect x="5.4054%" y="117" width="2.7027%" height="15" fill="rgb(241,131,45)" fg:x="2" fg:w="1"/><text x="5.6554%" y="127.50">dy..</text></g><g><title>invocation function for block in dyld3::MachOFile::forEachSection(void (dyld3::MachOFile::SectionInfo const&amp;, bool, bool&amp;) block_pointer) const (1 samples, 2.70%)</title><rect x="5.4054%" y="101" width="2.7027%" height="15" fill="rgb(249,31,29)" fg:x="2" fg:w="1"/><text x="5.6554%" y="111.50">in..</text></g><g><title>invocation function for block in dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (1 samples, 2.70%)</title><rect x="5.4054%" y="85" width="2.7027%" height="15" fill="rgb(225,111,53)" fg:x="2" fg:w="1"/><text x="5.6554%" y="95.50">in..</text></g><g><title>_GLOBAL__sub_I_Task.cpp (1 samples, 2.70%)</title><rect x="5.4054%" y="69" width="2.7027%" height="15" fill="rgb(238,160,17)" fg:x="2" fg:w="1"/><text x="5.6554%" y="79.50">_G..</text></g><g><title>dyld4::APIs::runAllInitializersForMain() (2 samples, 5.41%)</title><rect x="5.4054%" y="469" width="5.4054%" height="15" fill="rgb(214,148,48)" fg:x="2" fg:w="2"/><text x="5.6554%" y="479.50">dyld4::..</text></g><g><title>dyld4::Loader::runInitializersBottomUpPlusUpwardLinks(dyld4::RuntimeState&amp;) const (2 samples, 5.41%)</title><rect x="5.4054%" y="453" width="5.4054%" height="15" fill="rgb(232,36,49)" fg:x="2" fg:w="2"/><text x="5.6554%" y="463.50">dyld4::..</text></g><g><title>dyld4::Loader::runInitializersBottomUpPlusUpwardLinks(dyld4::RuntimeState&amp;) const::$_0::operator()() const (2 samples, 5.41%)</title><rect x="5.4054%" y="437" width="5.4054%" height="15" fill="rgb(209,103,24)" fg:x="2" fg:w="2"/><text x="5.6554%" y="447.50">dyld4::..</text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (2 samples, 5.41%)</title><rect x="5.4054%" y="421" width="5.4054%" height="15" fill="rgb(229,88,8)" fg:x="2" fg:w="2"/><text x="5.6554%" y="431.50">dyld4::..</text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (2 samples, 5.41%)</title><rect x="5.4054%" y="405" width="5.4054%" height="15" fill="rgb(213,181,19)" fg:x="2" fg:w="2"/><text x="5.6554%" y="415.50">dyld4::..</text></g><g><title>dyld4::Loader::runInitializersBottomUp(dyld4::RuntimeState&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;, dyld3::Array&lt;dyld4::Loader const*&gt;&amp;) const (2 samples, 5.41%)</title><rect x="5.4054%" y="389" width="5.4054%" height="15" fill="rgb(254,191,54)" fg:x="2" fg:w="2"/><text x="5.6554%" y="399.50">dyld4::..</text></g><g><title>dyld4::PrebuiltLoader::runInitializers(dyld4::RuntimeState&amp;) const (1 samples, 2.70%)</title><rect x="8.1081%" y="373" width="2.7027%" height="15" fill="rgb(241,83,37)" fg:x="3" fg:w="1"/><text x="8.3581%" y="383.50">dy..</text></g><g><title>dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (1 samples, 2.70%)</title><rect x="8.1081%" y="357" width="2.7027%" height="15" fill="rgb(233,36,39)" fg:x="3" fg:w="1"/><text x="8.3581%" y="367.50">dy..</text></g><g><title>dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (1 samples, 2.70%)</title><rect x="8.1081%" y="341" width="2.7027%" height="15" fill="rgb(226,3,54)" fg:x="3" fg:w="1"/><text x="8.3581%" y="351.50">dy..</text></g><g><title>dyld3::MachOFile::forEachSection(void (dyld3::MachOFile::SectionInfo const&amp;, bool, bool&amp;) block_pointer) const (1 samples, 2.70%)</title><rect x="8.1081%" y="325" width="2.7027%" height="15" fill="rgb(245,192,40)" fg:x="3" fg:w="1"/><text x="8.3581%" y="335.50">dy..</text></g><g><title>dyld3::MachOFile::forEachLoadCommand(Diagnostics&amp;, void (load_command const*, bool&amp;) block_pointer) const (1 samples, 2.70%)</title><rect x="8.1081%" y="309" width="2.7027%" height="15" fill="rgb(238,167,29)" fg:x="3" fg:w="1"/><text x="8.3581%" y="319.50">dy..</text></g><g><title>invocation function for block in dyld3::MachOFile::forEachSection(void (dyld3::MachOFile::SectionInfo const&amp;, bool, bool&amp;) block_pointer) const (1 samples, 2.70%)</title><rect x="8.1081%" y="293" width="2.7027%" height="15" fill="rgb(232,182,51)" fg:x="3" fg:w="1"/><text x="8.3581%" y="303.50">in..</text></g><g><title>invocation function for block in dyld3::MachOAnalyzer::forEachInitializer(Diagnostics&amp;, dyld3::MachOAnalyzer::VMAddrConverter const&amp;, void (unsigned int) block_pointer, void const*) const (1 samples, 2.70%)</title><rect x="8.1081%" y="277" width="2.7027%" height="15" fill="rgb(231,60,39)" fg:x="3" fg:w="1"/><text x="8.3581%" y="287.50">in..</text></g><g><title>invocation function for block in dyld4::Loader::findAndRunAllInitializers(dyld4::RuntimeState&amp;) const (1 samples, 2.70%)</title><rect x="8.1081%" y="261" width="2.7027%" height="15" fill="rgb(208,69,12)" fg:x="3" fg:w="1"/><text x="8.3581%" y="271.50">in..</text></g><g><title>dyld3::kdebug_trace_dyld_duration_end(unsigned long long, unsigned int, dyld3::kt_arg, dyld3::kt_arg, dyld3::kt_arg) (1 samples, 2.70%)</title><rect x="8.1081%" y="245" width="2.7027%" height="15" fill="rgb(235,93,37)" fg:x="3" fg:w="1"/><text x="8.3581%" y="255.50">dy..</text></g><g><title>__kdebug_trace64 (1 samples, 2.70%)</title><rect x="8.1081%" y="229" width="2.7027%" height="15" fill="rgb(213,116,39)" fg:x="3" fg:w="1"/><text x="8.3581%" y="239.50">__..</text></g><g><title>dyld4::JustInTimeLoader::applyFixups(Diagnostics&amp;, dyld4::RuntimeState&amp;, dyld4::DyldCacheDataConstLazyScopedWriter&amp;, bool, lsl::Vector&lt;std::__1::pair&lt;dyld4::Loader const*, char const*&gt;&gt;*) const (1 samples, 2.70%)</title><rect x="10.8108%" y="469" width="2.7027%" height="15" fill="rgb(222,207,29)" fg:x="4" fg:w="1"/><text x="11.0608%" y="479.50">dy..</text></g><g><title>dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 2.70%)</title><rect x="10.8108%" y="453" width="2.7027%" height="15" fill="rgb(206,96,30)" fg:x="4" fg:w="1"/><text x="11.0608%" y="463.50">dy..</text></g><g><title>dyld3::MachOAnalyzer::withVMLayout(Diagnostics&amp;, void (mach_o::Layout const&amp;) block_pointer) const (1 samples, 2.70%)</title><rect x="10.8108%" y="437" width="2.7027%" height="15" fill="rgb(218,138,4)" fg:x="4" fg:w="1"/><text x="11.0608%" y="447.50">dy..</text></g><g><title>invocation function for block in dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 2.70%)</title><rect x="10.8108%" y="421" width="2.7027%" height="15" fill="rgb(250,191,14)" fg:x="4" fg:w="1"/><text x="11.0608%" y="431.50">in..</text></g><g><title>mach_o::Fixups::forEachBindTarget_Opcodes(Diagnostics&amp;, bool, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 2.70%)</title><rect x="10.8108%" y="405" width="2.7027%" height="15" fill="rgb(239,60,40)" fg:x="4" fg:w="1"/><text x="11.0608%" y="415.50">ma..</text></g><g><title>mach_o::Fixups::forEachBindUnified_Opcodes(Diagnostics&amp;, bool, void (unsigned long long, unsigned int, mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (unsigned long long, unsigned int, mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 2.70%)</title><rect x="10.8108%" y="389" width="2.7027%" height="15" fill="rgb(206,27,48)" fg:x="4" fg:w="1"/><text x="11.0608%" y="399.50">ma..</text></g><g><title>mach_o::Fixups::forEachBind_OpcodesLazy(Diagnostics&amp;, void (char const*, bool, bool, unsigned int, int, unsigned int, unsigned int, unsigned long long, unsigned char, char const*, bool, bool, unsigned long long, bool, bool&amp;) block_pointer) const (1 samples, 2.70%)</title><rect x="10.8108%" y="373" width="2.7027%" height="15" fill="rgb(225,35,8)" fg:x="4" fg:w="1"/><text x="11.0608%" y="383.50">ma..</text></g><g><title>invocation function for block in mach_o::Fixups::forEachBindTarget_Opcodes(Diagnostics&amp;, bool, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer, void (mach_o::Fixups::BindTargetInfo const&amp;, bool&amp;) block_pointer) const (1 samples, 2.70%)</title><rect x="10.8108%" y="357" width="2.7027%" height="15" fill="rgb(250,213,24)" fg:x="4" fg:w="1"/><text x="11.0608%" y="367.50">in..</text></g><g><title>invocation function for block in dyld4::Loader::forEachBindTarget(Diagnostics&amp;, dyld4::RuntimeState&amp;, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer, void (dyld4::Loader::ResolvedSymbol const&amp;, bool&amp;) block_pointer) const (1 samples, 2.70%)</title><rect x="10.8108%" y="341" width="2.7027%" height="15" fill="rgb(247,123,22)" fg:x="4" fg:w="1"/><text x="11.0608%" y="351.50">in..</text></g><g><title>dyld4::Loader::resolveSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, int, char const*, bool, bool, void (unsigned int, unsigned int, dyld4::Loader::ResolvedSymbol const&amp;) block_pointer, bool) const (1 samples, 2.70%)</title><rect x="10.8108%" y="325" width="2.7027%" height="15" fill="rgb(231,138,38)" fg:x="4" fg:w="1"/><text x="11.0608%" y="335.50">dy..</text></g><g><title>dyld4::Loader::hasExportedSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::ExportedSymbolMode, dyld4::Loader::ResolverMode, dyld4::Loader::ResolvedSymbol*, dyld3::Array&lt;dyld4::Loader const*&gt;*) const (1 samples, 2.70%)</title><rect x="10.8108%" y="309" width="2.7027%" height="15" fill="rgb(231,145,46)" fg:x="4" fg:w="1"/><text x="11.0608%" y="319.50">dy..</text></g><g><title>dyld4::Loader::hasExportedSymbol(Diagnostics&amp;, dyld4::RuntimeState&amp;, char const*, dyld4::Loader::ExportedSymbolMode, dyld4::Loader::ResolverMode, dyld4::Loader::ResolvedSymbol*, dyld3::Array&lt;dyld4::Loader const*&gt;*) const (1 samples, 2.70%)</title><rect x="10.8108%" y="293" width="2.7027%" height="15" fill="rgb(251,118,11)" fg:x="4" fg:w="1"/><text x="11.0608%" y="303.50">dy..</text></g><g><title>dyld4::start(dyld4::KernelArgs*, void*, void*)::$_0::operator()() const (5 samples, 13.51%)</title><rect x="2.7027%" y="501" width="13.5135%" height="15" fill="rgb(217,147,25)" fg:x="1" fg:w="5"/><text x="2.9527%" y="511.50">dyld4::start(dyld4::..</text></g><g><title>dyld4::prepare(dyld4::APIs&amp;, dyld3::MachOAnalyzer const*) (5 samples, 13.51%)</title><rect x="2.7027%" y="485" width="13.5135%" height="15" fill="rgb(247,81,37)" fg:x="1" fg:w="5"/><text x="2.9527%" y="495.50">dyld4::prepare(dyld4..</text></g><g><title>dyld4::RuntimeState::notifyDtrace(std::__1::span&lt;dyld4::Loader const*, 18446744073709551615ul&gt; const&amp;) (1 samples, 2.70%)</title><rect x="13.5135%" y="469" width="2.7027%" height="15" fill="rgb(209,12,38)" fg:x="5" fg:w="1"/><text x="13.7635%" y="479.50">dy..</text></g><g><title>dyld3::MachOFile::forEachDOFSection(Diagnostics&amp;, void (unsigned int) block_pointer) const (1 samples, 2.70%)</title><rect x="13.5135%" y="453" width="2.7027%" height="15" fill="rgb(227,1,9)" fg:x="5" fg:w="1"/><text x="13.7635%" y="463.50">dy..</text></g><g><title>dyld3::MachOFile::forEachSection(void (dyld3::MachOFile::SectionInfo const&amp;, bool, bool&amp;) block_pointer) const (1 samples, 2.70%)</title><rect x="13.5135%" y="437" width="2.7027%" height="15" fill="rgb(248,47,43)" fg:x="5" fg:w="1"/><text x="13.7635%" y="447.50">dy..</text></g><g><title>dyld3::MachOFile::forEachLoadCommand(Diagnostics&amp;, void (load_command const*, bool&amp;) block_pointer) const (1 samples, 2.70%)</title><rect x="13.5135%" y="421" width="2.7027%" height="15" fill="rgb(221,10,30)" fg:x="5" fg:w="1"/><text x="13.7635%" y="431.50">dy..</text></g><g><title>dingo_test_runner::executor::file_executor::FileExecutor::execute_parallel (2 samples, 5.41%)</title><rect x="18.9189%" y="421" width="5.4054%" height="15" fill="rgb(210,229,1)" fg:x="7" fg:w="2"/><text x="19.1689%" y="431.50">dingo_t..</text></g><g><title>dingo_test_runner::report::EnvironmentInfo::get_git_commit (2 samples, 5.41%)</title><rect x="18.9189%" y="405" width="5.4054%" height="15" fill="rgb(222,148,37)" fg:x="7" fg:w="2"/><text x="19.1689%" y="415.50">dingo_t..</text></g><g><title>std::process::Command::output (2 samples, 5.41%)</title><rect x="18.9189%" y="389" width="5.4054%" height="15" fill="rgb(234,67,33)" fg:x="7" fg:w="2"/><text x="19.1689%" y="399.50">std::pr..</text></g><g><title>std::sys::process::unix::unix::_&lt;impl std::sys::process::unix::common::Command&gt;::spawn (2 samples, 5.41%)</title><rect x="18.9189%" y="373" width="5.4054%" height="15" fill="rgb(247,98,35)" fg:x="7" fg:w="2"/><text x="19.1689%" y="383.50">std::sy..</text></g><g><title>posix_spawnp (2 samples, 5.41%)</title><rect x="18.9189%" y="357" width="5.4054%" height="15" fill="rgb(247,138,52)" fg:x="7" fg:w="2"/><text x="19.1689%" y="367.50">posix_s..</text></g><g><title>posix_spawn (2 samples, 5.41%)</title><rect x="18.9189%" y="341" width="5.4054%" height="15" fill="rgb(213,79,30)" fg:x="7" fg:w="2"/><text x="19.1689%" y="351.50">posix_s..</text></g><g><title>__posix_spawn (2 samples, 5.41%)</title><rect x="18.9189%" y="325" width="5.4054%" height="15" fill="rgb(246,177,23)" fg:x="7" fg:w="2"/><text x="19.1689%" y="335.50">__posix..</text></g><g><title>start (9 samples, 24.32%)</title><rect x="2.7027%" y="517" width="24.3243%" height="15" fill="rgb(230,62,27)" fg:x="1" fg:w="9"/><text x="2.9527%" y="527.50">start</text></g><g><title>main (4 samples, 10.81%)</title><rect x="16.2162%" y="501" width="10.8108%" height="15" fill="rgb(216,154,8)" fg:x="6" fg:w="4"/><text x="16.4662%" y="511.50">main</text></g><g><title>std::rt::lang_start_internal (4 samples, 10.81%)</title><rect x="16.2162%" y="485" width="10.8108%" height="15" fill="rgb(244,35,45)" fg:x="6" fg:w="4"/><text x="16.4662%" y="495.50">std::rt::lang_st..</text></g><g><title>std::rt::lang_start::_{{closure}} (3 samples, 8.11%)</title><rect x="18.9189%" y="469" width="8.1081%" height="15" fill="rgb(251,115,12)" fg:x="7" fg:w="3"/><text x="19.1689%" y="479.50">std::rt::la..</text></g><g><title>core::ops::function::FnOnce::call_once (3 samples, 8.11%)</title><rect x="18.9189%" y="453" width="8.1081%" height="15" fill="rgb(240,54,50)" fg:x="7" fg:w="3"/><text x="19.1689%" y="463.50">core::ops::..</text></g><g><title>dingo_test_runner::main (3 samples, 8.11%)</title><rect x="18.9189%" y="437" width="8.1081%" height="15" fill="rgb(233,84,52)" fg:x="7" fg:w="3"/><text x="19.1689%" y="447.50">dingo_test_..</text></g><g><title>rayon_core::thread_pool::ThreadPool::build (1 samples, 2.70%)</title><rect x="24.3243%" y="421" width="2.7027%" height="15" fill="rgb(207,117,47)" fg:x="9" fg:w="1"/><text x="24.5743%" y="431.50">ra..</text></g><g><title>rayon_core::registry::Registry::new (1 samples, 2.70%)</title><rect x="24.3243%" y="405" width="2.7027%" height="15" fill="rgb(249,43,39)" fg:x="9" fg:w="1"/><text x="24.5743%" y="415.50">ra..</text></g><g><title>&lt;rayon_core::registry::DefaultSpawn as rayon_core::registry::ThreadSpawn&gt;::spawn (1 samples, 2.70%)</title><rect x="24.3243%" y="389" width="2.7027%" height="15" fill="rgb(209,38,44)" fg:x="9" fg:w="1"/><text x="24.5743%" y="399.50">&lt;r..</text></g><g><title>std::thread::Builder::spawn_unchecked (1 samples, 2.70%)</title><rect x="24.3243%" y="373" width="2.7027%" height="15" fill="rgb(236,212,23)" fg:x="9" fg:w="1"/><text x="24.5743%" y="383.50">st..</text></g><g><title>std::sys::pal::unix::thread::Thread::new (1 samples, 2.70%)</title><rect x="24.3243%" y="357" width="2.7027%" height="15" fill="rgb(242,79,21)" fg:x="9" fg:w="1"/><text x="24.5743%" y="367.50">st..</text></g><g><title>_pthread_create (1 samples, 2.70%)</title><rect x="24.3243%" y="341" width="2.7027%" height="15" fill="rgb(211,96,35)" fg:x="9" fg:w="1"/><text x="24.5743%" y="351.50">_p..</text></g><g><title>__bsdthread_create (1 samples, 2.70%)</title><rect x="24.3243%" y="325" width="2.7027%" height="15" fill="rgb(253,215,40)" fg:x="9" fg:w="1"/><text x="24.5743%" y="335.50">__..</text></g><g><title>core::mem::drop (2 samples, 5.41%)</title><rect x="27.0270%" y="357" width="5.4054%" height="15" fill="rgb(211,81,21)" fg:x="10" fg:w="2"/><text x="27.2770%" y="367.50">core::m..</text></g><g><title>core::ptr::mut_ptr::_&lt;impl *mut T&gt;::drop_in_place (2 samples, 5.41%)</title><rect x="27.0270%" y="341" width="5.4054%" height="15" fill="rgb(208,190,38)" fg:x="10" fg:w="2"/><text x="27.2770%" y="351.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;mysql::conn::pool::PooledConn&gt;&gt; (2 samples, 5.41%)</title><rect x="27.0270%" y="325" width="5.4054%" height="15" fill="rgb(235,213,38)" fg:x="10" fg:w="2"/><text x="27.2770%" y="335.50">core::p..</text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 5.41%)</title><rect x="27.0270%" y="309" width="5.4054%" height="15" fill="rgb(237,122,38)" fg:x="10" fg:w="2"/><text x="27.2770%" y="319.50">alloc::..</text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 5.41%)</title><rect x="27.0270%" y="293" width="5.4054%" height="15" fill="rgb(244,218,35)" fg:x="10" fg:w="2"/><text x="27.2770%" y="303.50">&lt;alloc:..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;mysql::conn::ConnInner&gt;&gt; (2 samples, 5.41%)</title><rect x="27.0270%" y="277" width="5.4054%" height="15" fill="rgb(240,68,47)" fg:x="10" fg:w="2"/><text x="27.2770%" y="287.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;mysql::io::Stream&gt;&gt;&gt; (2 samples, 5.41%)</title><rect x="27.0270%" y="261" width="5.4054%" height="15" fill="rgb(210,16,53)" fg:x="10" fg:w="2"/><text x="27.2770%" y="271.50">core::p..</text></g><g><title>free_medium (2 samples, 5.41%)</title><rect x="27.0270%" y="245" width="5.4054%" height="15" fill="rgb(235,124,12)" fg:x="10" fg:w="2"/><text x="27.2770%" y="255.50">free_me..</text></g><g><title>mvm_madvise_free_plat (2 samples, 5.41%)</title><rect x="27.0270%" y="229" width="5.4054%" height="15" fill="rgb(224,169,11)" fg:x="10" fg:w="2"/><text x="27.2770%" y="239.50">mvm_mad..</text></g><g><title>madvise (2 samples, 5.41%)</title><rect x="27.0270%" y="213" width="5.4054%" height="15" fill="rgb(250,166,2)" fg:x="10" fg:w="2"/><text x="27.2770%" y="223.50">madvise</text></g><g><title>mysql_common::packets::HandshakePacket::maria_db_server_version_parsed (1 samples, 2.70%)</title><rect x="35.1351%" y="213" width="2.7027%" height="15" fill="rgb(242,216,29)" fg:x="13" fg:w="1"/><text x="35.3851%" y="223.50">my..</text></g><g><title>std::sys::sync::once::queue::Once::call (1 samples, 2.70%)</title><rect x="35.1351%" y="197" width="2.7027%" height="15" fill="rgb(230,116,27)" fg:x="13" fg:w="1"/><text x="35.3851%" y="207.50">st..</text></g><g><title>std::sync::poison::once::Once::call_once::_{{closure}} (1 samples, 2.70%)</title><rect x="35.1351%" y="181" width="2.7027%" height="15" fill="rgb(228,99,48)" fg:x="13" fg:w="1"/><text x="35.3851%" y="191.50">st..</text></g><g><title>regex::regex::bytes::Regex::new (1 samples, 2.70%)</title><rect x="35.1351%" y="165" width="2.7027%" height="15" fill="rgb(253,11,6)" fg:x="13" fg:w="1"/><text x="35.3851%" y="175.50">re..</text></g><g><title>regex::builders::Builder::build_one_bytes (1 samples, 2.70%)</title><rect x="35.1351%" y="149" width="2.7027%" height="15" fill="rgb(247,143,39)" fg:x="13" fg:w="1"/><text x="35.3851%" y="159.50">re..</text></g><g><title>regex_automata::meta::regex::Builder::build (1 samples, 2.70%)</title><rect x="35.1351%" y="133" width="2.7027%" height="15" fill="rgb(236,97,10)" fg:x="13" fg:w="1"/><text x="35.3851%" y="143.50">re..</text></g><g><title>regex_automata::meta::strategy::new (1 samples, 2.70%)</title><rect x="35.1351%" y="117" width="2.7027%" height="15" fill="rgb(233,208,19)" fg:x="13" fg:w="1"/><text x="35.3851%" y="127.50">re..</text></g><g><title>regex_automata::meta::wrappers::OnePass::new (1 samples, 2.70%)</title><rect x="35.1351%" y="101" width="2.7027%" height="15" fill="rgb(216,164,2)" fg:x="13" fg:w="1"/><text x="35.3851%" y="111.50">re..</text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (1 samples, 2.70%)</title><rect x="35.1351%" y="85" width="2.7027%" height="15" fill="rgb(220,129,5)" fg:x="13" fg:w="1"/><text x="35.3851%" y="95.50">re..</text></g><g><title>mysql::conn::Conn::connect (3 samples, 8.11%)</title><rect x="32.4324%" y="229" width="8.1081%" height="15" fill="rgb(242,17,10)" fg:x="12" fg:w="3"/><text x="32.6824%" y="239.50">mysql::conn..</text></g><g><title>mysql_common::packets::HandshakePacket::server_version_parsed (1 samples, 2.70%)</title><rect x="37.8378%" y="213" width="2.7027%" height="15" fill="rgb(242,107,0)" fg:x="14" fg:w="1"/><text x="38.0878%" y="223.50">my..</text></g><g><title>std::sys::sync::once::queue::Once::call (1 samples, 2.70%)</title><rect x="37.8378%" y="197" width="2.7027%" height="15" fill="rgb(251,28,31)" fg:x="14" fg:w="1"/><text x="38.0878%" y="207.50">st..</text></g><g><title>std::sync::poison::once::Once::call_once::_{{closure}} (1 samples, 2.70%)</title><rect x="37.8378%" y="181" width="2.7027%" height="15" fill="rgb(233,223,10)" fg:x="14" fg:w="1"/><text x="38.0878%" y="191.50">st..</text></g><g><title>regex::regex::bytes::Regex::new (1 samples, 2.70%)</title><rect x="37.8378%" y="165" width="2.7027%" height="15" fill="rgb(215,21,27)" fg:x="14" fg:w="1"/><text x="38.0878%" y="175.50">re..</text></g><g><title>regex::builders::Builder::build_one_bytes (1 samples, 2.70%)</title><rect x="37.8378%" y="149" width="2.7027%" height="15" fill="rgb(232,23,21)" fg:x="14" fg:w="1"/><text x="38.0878%" y="159.50">re..</text></g><g><title>regex_automata::meta::regex::Builder::build (1 samples, 2.70%)</title><rect x="37.8378%" y="133" width="2.7027%" height="15" fill="rgb(244,5,23)" fg:x="14" fg:w="1"/><text x="38.0878%" y="143.50">re..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 2.70%)</title><rect x="37.8378%" y="117" width="2.7027%" height="15" fill="rgb(226,81,46)" fg:x="14" fg:w="1"/><text x="38.0878%" y="127.50">re..</text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 2.70%)</title><rect x="37.8378%" y="101" width="2.7027%" height="15" fill="rgb(247,70,30)" fg:x="14" fg:w="1"/><text x="38.0878%" y="111.50">re..</text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 2.70%)</title><rect x="37.8378%" y="85" width="2.7027%" height="15" fill="rgb(212,68,19)" fg:x="14" fg:w="1"/><text x="38.0878%" y="95.50">&lt;r..</text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 2.70%)</title><rect x="37.8378%" y="69" width="2.7027%" height="15" fill="rgb(240,187,13)" fg:x="14" fg:w="1"/><text x="38.0878%" y="79.50">re..</text></g><g><title>regex_syntax::unicode::perl_digit (1 samples, 2.70%)</title><rect x="37.8378%" y="53" width="2.7027%" height="15" fill="rgb(223,113,26)" fg:x="14" fg:w="1"/><text x="38.0878%" y="63.50">re..</text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 2.70%)</title><rect x="37.8378%" y="37" width="2.7027%" height="15" fill="rgb(206,192,2)" fg:x="14" fg:w="1"/><text x="38.0878%" y="47.50">re..</text></g><g><title>dingo_test_runner::tester::tester::Tester::new (4 samples, 10.81%)</title><rect x="32.4324%" y="341" width="10.8108%" height="15" fill="rgb(241,108,4)" fg:x="12" fg:w="4"/><text x="32.6824%" y="351.50">dingo_test_runne..</text></g><g><title>dingo_test_runner::tester::connection_manager::ConnectionManager::new (4 samples, 10.81%)</title><rect x="32.4324%" y="325" width="10.8108%" height="15" fill="rgb(247,173,49)" fg:x="12" fg:w="4"/><text x="32.6824%" y="335.50">dingo_test_runne..</text></g><g><title>dingo_test_runner::tester::database::MySQLDatabase::new (4 samples, 10.81%)</title><rect x="32.4324%" y="309" width="10.8108%" height="15" fill="rgb(224,114,35)" fg:x="12" fg:w="4"/><text x="32.6824%" y="319.50">dingo_test_runne..</text></g><g><title>mysql::conn::pool::Pool::new (4 samples, 10.81%)</title><rect x="32.4324%" y="293" width="10.8108%" height="15" fill="rgb(245,159,27)" fg:x="12" fg:w="4"/><text x="32.6824%" y="303.50">mysql::conn::poo..</text></g><g><title>mysql::conn::pool::inner::Inner::new (4 samples, 10.81%)</title><rect x="32.4324%" y="277" width="10.8108%" height="15" fill="rgb(245,172,44)" fg:x="12" fg:w="4"/><text x="32.6824%" y="287.50">mysql::conn::poo..</text></g><g><title>mysql::conn::pool::inner::Protected::new_conn (4 samples, 10.81%)</title><rect x="32.4324%" y="261" width="10.8108%" height="15" fill="rgb(236,23,11)" fg:x="12" fg:w="4"/><text x="32.6824%" y="271.50">mysql::conn::poo..</text></g><g><title>mysql::conn::Conn::new (4 samples, 10.81%)</title><rect x="32.4324%" y="245" width="10.8108%" height="15" fill="rgb(205,117,38)" fg:x="12" fg:w="4"/><text x="32.6824%" y="255.50">mysql::conn::Con..</text></g><g><title>mysql::conn::Conn::connect_stream (1 samples, 2.70%)</title><rect x="40.5405%" y="229" width="2.7027%" height="15" fill="rgb(237,72,25)" fg:x="15" fg:w="1"/><text x="40.7905%" y="239.50">my..</text></g><g><title>mysql::io::Stream::connect_socket (1 samples, 2.70%)</title><rect x="40.5405%" y="213" width="2.7027%" height="15" fill="rgb(244,70,9)" fg:x="15" fg:w="1"/><text x="40.7905%" y="223.50">my..</text></g><g><title>std::os::unix::net::stream::UnixStream::connect (1 samples, 2.70%)</title><rect x="40.5405%" y="197" width="2.7027%" height="15" fill="rgb(217,125,39)" fg:x="15" fg:w="1"/><text x="40.7905%" y="207.50">st..</text></g><g><title>std::sys::net::connection::socket::unix::Socket::new_raw (1 samples, 2.70%)</title><rect x="40.5405%" y="181" width="2.7027%" height="15" fill="rgb(235,36,10)" fg:x="15" fg:w="1"/><text x="40.7905%" y="191.50">st..</text></g><g><title>socket (1 samples, 2.70%)</title><rect x="40.5405%" y="165" width="2.7027%" height="15" fill="rgb(251,123,47)" fg:x="15" fg:w="1"/><text x="40.7905%" y="175.50">so..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;mysql::conn::pool::PooledConn&gt;&gt; (1 samples, 2.70%)</title><rect x="43.2432%" y="309" width="2.7027%" height="15" fill="rgb(221,13,13)" fg:x="16" fg:w="1"/><text x="43.4932%" y="319.50">co..</text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 2.70%)</title><rect x="43.2432%" y="293" width="2.7027%" height="15" fill="rgb(238,131,9)" fg:x="16" fg:w="1"/><text x="43.4932%" y="303.50">&lt;a..</text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 2.70%)</title><rect x="43.2432%" y="277" width="2.7027%" height="15" fill="rgb(211,50,8)" fg:x="16" fg:w="1"/><text x="43.4932%" y="287.50">al..</text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 2.70%)</title><rect x="43.2432%" y="261" width="2.7027%" height="15" fill="rgb(245,182,24)" fg:x="16" fg:w="1"/><text x="43.4932%" y="271.50">&lt;a..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;mysql::conn::ConnInner&gt;&gt; (1 samples, 2.70%)</title><rect x="43.2432%" y="245" width="2.7027%" height="15" fill="rgb(242,14,37)" fg:x="16" fg:w="1"/><text x="43.4932%" y="255.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;mysql::io::Stream&gt;&gt;&gt; (1 samples, 2.70%)</title><rect x="43.2432%" y="229" width="2.7027%" height="15" fill="rgb(246,228,12)" fg:x="16" fg:w="1"/><text x="43.4932%" y="239.50">co..</text></g><g><title>free_medium (1 samples, 2.70%)</title><rect x="43.2432%" y="213" width="2.7027%" height="15" fill="rgb(213,55,15)" fg:x="16" fg:w="1"/><text x="43.4932%" y="223.50">fr..</text></g><g><title>mvm_madvise_free_plat (1 samples, 2.70%)</title><rect x="43.2432%" y="197" width="2.7027%" height="15" fill="rgb(209,9,3)" fg:x="16" fg:w="1"/><text x="43.4932%" y="207.50">mv..</text></g><g><title>madvise (1 samples, 2.70%)</title><rect x="43.2432%" y="181" width="2.7027%" height="15" fill="rgb(230,59,30)" fg:x="16" fg:w="1"/><text x="43.4932%" y="191.50">ma..</text></g><g><title>dingo_test_runner::tester::tester::Tester::post_process (2 samples, 5.41%)</title><rect x="43.2432%" y="341" width="5.4054%" height="15" fill="rgb(209,121,21)" fg:x="16" fg:w="2"/><text x="43.4932%" y="351.50">dingo_t..</text></g><g><title>dingo_test_runner::tester::database::MySQLDatabase::cleanup_after_test (2 samples, 5.41%)</title><rect x="43.2432%" y="325" width="5.4054%" height="15" fill="rgb(220,109,13)" fg:x="16" fg:w="2"/><text x="43.4932%" y="335.50">dingo_t..</text></g><g><title>dingo_test_runner::tester::database::MySQLDatabase::switch_database (1 samples, 2.70%)</title><rect x="45.9459%" y="309" width="2.7027%" height="15" fill="rgb(232,18,1)" fg:x="17" fg:w="1"/><text x="46.1959%" y="319.50">di..</text></g><g><title>mysql::conn::pool::Pool::new (1 samples, 2.70%)</title><rect x="45.9459%" y="293" width="2.7027%" height="15" fill="rgb(215,41,42)" fg:x="17" fg:w="1"/><text x="46.1959%" y="303.50">my..</text></g><g><title>mysql::conn::pool::inner::Inner::new (1 samples, 2.70%)</title><rect x="45.9459%" y="277" width="2.7027%" height="15" fill="rgb(224,123,36)" fg:x="17" fg:w="1"/><text x="46.1959%" y="287.50">my..</text></g><g><title>mysql::conn::pool::inner::Protected::new_conn (1 samples, 2.70%)</title><rect x="45.9459%" y="261" width="2.7027%" height="15" fill="rgb(240,125,3)" fg:x="17" fg:w="1"/><text x="46.1959%" y="271.50">my..</text></g><g><title>mysql::conn::Conn::new (1 samples, 2.70%)</title><rect x="45.9459%" y="245" width="2.7027%" height="15" fill="rgb(205,98,50)" fg:x="17" fg:w="1"/><text x="46.1959%" y="255.50">my..</text></g><g><title>mysql::conn::Conn::connect (1 samples, 2.70%)</title><rect x="45.9459%" y="229" width="2.7027%" height="15" fill="rgb(205,185,37)" fg:x="17" fg:w="1"/><text x="46.1959%" y="239.50">my..</text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (1 samples, 2.70%)</title><rect x="45.9459%" y="213" width="2.7027%" height="15" fill="rgb(238,207,15)" fg:x="17" fg:w="1"/><text x="46.1959%" y="223.50">my..</text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (1 samples, 2.70%)</title><rect x="45.9459%" y="197" width="2.7027%" height="15" fill="rgb(213,199,42)" fg:x="17" fg:w="1"/><text x="46.1959%" y="207.50">st..</text></g><g><title>std::net::udp::UdpSocket::send (1 samples, 2.70%)</title><rect x="45.9459%" y="181" width="2.7027%" height="15" fill="rgb(235,201,11)" fg:x="17" fg:w="1"/><text x="46.1959%" y="191.50">st..</text></g><g><title>__sendto (1 samples, 2.70%)</title><rect x="45.9459%" y="165" width="2.7027%" height="15" fill="rgb(207,46,11)" fg:x="17" fg:w="1"/><text x="46.1959%" y="175.50">__..</text></g><g><title>socket2::socket::Socket::connect (2 samples, 5.41%)</title><rect x="48.6486%" y="165" width="5.4054%" height="15" fill="rgb(241,35,35)" fg:x="18" fg:w="2"/><text x="48.8986%" y="175.50">socket2..</text></g><g><title>__connect (2 samples, 5.41%)</title><rect x="48.6486%" y="149" width="5.4054%" height="15" fill="rgb(243,32,47)" fg:x="18" fg:w="2"/><text x="48.8986%" y="159.50">__conne..</text></g><g><title>dingo_test_runner::tester::tester::Tester::pre_process (4 samples, 10.81%)</title><rect x="48.6486%" y="341" width="10.8108%" height="15" fill="rgb(247,202,23)" fg:x="18" fg:w="4"/><text x="48.8986%" y="351.50">dingo_test_runne..</text></g><g><title>dingo_test_runner::tester::database::MySQLDatabase::init_for_test (4 samples, 10.81%)</title><rect x="48.6486%" y="325" width="10.8108%" height="15" fill="rgb(219,102,11)" fg:x="18" fg:w="4"/><text x="48.8986%" y="335.50">dingo_test_runne..</text></g><g><title>dingo_test_runner::tester::database::MySQLDatabase::switch_database (4 samples, 10.81%)</title><rect x="48.6486%" y="309" width="10.8108%" height="15" fill="rgb(243,110,44)" fg:x="18" fg:w="4"/><text x="48.8986%" y="319.50">dingo_test_runne..</text></g><g><title>mysql::conn::pool::Pool::new (4 samples, 10.81%)</title><rect x="48.6486%" y="293" width="10.8108%" height="15" fill="rgb(222,74,54)" fg:x="18" fg:w="4"/><text x="48.8986%" y="303.50">mysql::conn::poo..</text></g><g><title>mysql::conn::pool::inner::Inner::new (4 samples, 10.81%)</title><rect x="48.6486%" y="277" width="10.8108%" height="15" fill="rgb(216,99,12)" fg:x="18" fg:w="4"/><text x="48.8986%" y="287.50">mysql::conn::poo..</text></g><g><title>mysql::conn::pool::inner::Protected::new_conn (4 samples, 10.81%)</title><rect x="48.6486%" y="261" width="10.8108%" height="15" fill="rgb(226,22,26)" fg:x="18" fg:w="4"/><text x="48.8986%" y="271.50">mysql::conn::poo..</text></g><g><title>mysql::conn::Conn::new (4 samples, 10.81%)</title><rect x="48.6486%" y="245" width="10.8108%" height="15" fill="rgb(217,163,10)" fg:x="18" fg:w="4"/><text x="48.8986%" y="255.50">mysql::conn::Con..</text></g><g><title>mysql::conn::Conn::connect_stream (4 samples, 10.81%)</title><rect x="48.6486%" y="229" width="10.8108%" height="15" fill="rgb(213,25,53)" fg:x="18" fg:w="4"/><text x="48.8986%" y="239.50">mysql::conn::Con..</text></g><g><title>mysql::io::Stream::connect_tcp (4 samples, 10.81%)</title><rect x="48.6486%" y="213" width="10.8108%" height="15" fill="rgb(252,105,26)" fg:x="18" fg:w="4"/><text x="48.8986%" y="223.50">mysql::io::Strea..</text></g><g><title>mysql::io::tcp::MyTcpBuilder&lt;T&gt;::connect (4 samples, 10.81%)</title><rect x="48.6486%" y="197" width="10.8108%" height="15" fill="rgb(220,39,43)" fg:x="18" fg:w="4"/><text x="48.8986%" y="207.50">mysql::io::tcp::..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 10.81%)</title><rect x="48.6486%" y="181" width="10.8108%" height="15" fill="rgb(229,68,48)" fg:x="18" fg:w="4"/><text x="48.8986%" y="191.50">&lt;alloc::vec::int..</text></g><g><title>socket2::socket::Socket::new (2 samples, 5.41%)</title><rect x="54.0541%" y="165" width="5.4054%" height="15" fill="rgb(252,8,32)" fg:x="20" fg:w="2"/><text x="54.3041%" y="175.50">socket2..</text></g><g><title>socket (2 samples, 5.41%)</title><rect x="54.0541%" y="149" width="5.4054%" height="15" fill="rgb(223,20,43)" fg:x="20" fg:w="2"/><text x="54.3041%" y="159.50">socket</text></g><g><title>&lt;dingo_test_runner::tester::pest_parser::PestMySQLParser as pest::parser::Parser&lt;dingo_test_runner::tester::pest_parser::Rule&gt;&gt;::parse (1 samples, 2.70%)</title><rect x="59.4595%" y="325" width="2.7027%" height="15" fill="rgb(229,81,49)" fg:x="22" fg:w="1"/><text x="59.7095%" y="335.50">&lt;d..</text></g><g><title>pest::parser_state::state (1 samples, 2.70%)</title><rect x="59.4595%" y="309" width="2.7027%" height="15" fill="rgb(236,28,36)" fg:x="22" fg:w="1"/><text x="59.7095%" y="319.50">pe..</text></g><g><title>&lt;dingo_test_runner::tester::pest_parser::PestMySQLParser as pest::parser::Parser&lt;dingo_test_runner::tester::pest_parser::Rule&gt;&gt;::parse::rules::visible::WHITESPACE (1 samples, 2.70%)</title><rect x="59.4595%" y="293" width="2.7027%" height="15" fill="rgb(249,185,26)" fg:x="22" fg:w="1"/><text x="59.7095%" y="303.50">&lt;d..</text></g><g><title>&lt;dingo_test_runner::tester::pest_parser::PestMySQLParser as pest::parser::Parser&lt;dingo_test_runner::tester::pest_parser::Rule&gt;&gt;::parse::rules::visible::WHITESPACE::_{{closure}} (1 samples, 2.70%)</title><rect x="59.4595%" y="277" width="2.7027%" height="15" fill="rgb(249,174,33)" fg:x="22" fg:w="1"/><text x="59.7095%" y="287.50">&lt;d..</text></g><g><title>pest::parser_state::ParserState&lt;R&gt;::match_string (1 samples, 2.70%)</title><rect x="59.4595%" y="261" width="2.7027%" height="15" fill="rgb(233,201,37)" fg:x="22" fg:w="1"/><text x="59.7095%" y="271.50">pe..</text></g><g><title>&lt;&lt;rayon::iter::enumerate::Enumerate&lt;I&gt; as rayon::iter::IndexedParallelIterator&gt;::with_producer::Callback&lt;CB&gt; as rayon::iter::plumbing::ProducerCallback&lt;I&gt;&gt;::callback (14 samples, 37.84%)</title><rect x="27.0270%" y="405" width="37.8378%" height="15" fill="rgb(221,78,26)" fg:x="10" fg:w="14"/><text x="27.2770%" y="415.50">&lt;&lt;rayon::iter::enumerate::Enumerate&lt;I&gt; as rayon::iter::Indexed..</text></g><g><title>rayon_core::join::join_context (14 samples, 37.84%)</title><rect x="27.0270%" y="389" width="37.8378%" height="15" fill="rgb(250,127,30)" fg:x="10" fg:w="14"/><text x="27.2770%" y="399.50">rayon_core::join::join_context</text></g><g><title>rayon_core::join::join_context::_{{closure}} (14 samples, 37.84%)</title><rect x="27.0270%" y="373" width="37.8378%" height="15" fill="rgb(230,49,44)" fg:x="10" fg:w="14"/><text x="27.2770%" y="383.50">rayon_core::join::join_context::_{{closure}}</text></g><g><title>dingo_test_runner::executor::file_executor::FileExecutor::execute_single_test (12 samples, 32.43%)</title><rect x="32.4324%" y="357" width="32.4324%" height="15" fill="rgb(229,67,23)" fg:x="12" fg:w="12"/><text x="32.6824%" y="367.50">dingo_test_runner::executor::file_executor::FileExec..</text></g><g><title>dingo_test_runner::tester::tester::Tester::run_test_file (2 samples, 5.41%)</title><rect x="59.4595%" y="341" width="5.4054%" height="15" fill="rgb(249,83,47)" fg:x="22" fg:w="2"/><text x="59.7095%" y="351.50">dingo_t..</text></g><g><title>alloc::string::String::from_utf8_lossy (1 samples, 2.70%)</title><rect x="62.1622%" y="325" width="2.7027%" height="15" fill="rgb(215,43,3)" fg:x="23" fg:w="1"/><text x="62.4122%" y="335.50">al..</text></g><g><title>&lt;core::str::lossy::Utf8Chunks as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 2.70%)</title><rect x="62.1622%" y="309" width="2.7027%" height="15" fill="rgb(238,154,13)" fg:x="23" fg:w="1"/><text x="62.4122%" y="319.50">&lt;c..</text></g><g><title>dingo_test_runner::tester::tester::Tester::execute_query_with_control_flow (1 samples, 2.70%)</title><rect x="64.8649%" y="357" width="2.7027%" height="15" fill="rgb(219,56,2)" fg:x="24" fg:w="1"/><text x="65.1149%" y="367.50">di..</text></g><g><title>dingo_test_runner::tester::tester::Tester::execute_query (1 samples, 2.70%)</title><rect x="64.8649%" y="341" width="2.7027%" height="15" fill="rgb(233,0,4)" fg:x="24" fg:w="1"/><text x="65.1149%" y="351.50">di..</text></g><g><title>dingo_test_runner::tester::tester::Tester::execute_sql_query (1 samples, 2.70%)</title><rect x="64.8649%" y="325" width="2.7027%" height="15" fill="rgb(235,30,7)" fg:x="24" fg:w="1"/><text x="65.1149%" y="335.50">di..</text></g><g><title>dingo_test_runner::tester::database::MySQLDatabase::query (1 samples, 2.70%)</title><rect x="64.8649%" y="309" width="2.7027%" height="15" fill="rgb(250,79,13)" fg:x="24" fg:w="1"/><text x="65.1149%" y="319.50">di..</text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 2.70%)</title><rect x="64.8649%" y="293" width="2.7027%" height="15" fill="rgb(211,146,34)" fg:x="24" fg:w="1"/><text x="65.1149%" y="303.50">&lt;T..</text></g><g><title>&lt;mysql::conn::query_result::SetIteratorState as core::convert::From&lt;mysql::conn::query_result::Or&lt;alloc::vec::Vec&lt;mysql_common::packets::Column&gt;,mysql_common::packets::OkPacket&gt;&gt;&gt;::from (1 samples, 2.70%)</title><rect x="64.8649%" y="277" width="2.7027%" height="15" fill="rgb(228,22,38)" fg:x="24" fg:w="1"/><text x="65.1149%" y="287.50">&lt;m..</text></g><g><title>alloc::sync::arcinner_layout_for_value_layout (1 samples, 2.70%)</title><rect x="64.8649%" y="261" width="2.7027%" height="15" fill="rgb(235,168,5)" fg:x="24" fg:w="1"/><text x="65.1149%" y="271.50">al..</text></g><g><title>mysql::conn::Conn::connect (1 samples, 2.70%)</title><rect x="67.5676%" y="245" width="2.7027%" height="15" fill="rgb(221,155,16)" fg:x="25" fg:w="1"/><text x="67.8176%" y="255.50">my..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 2.70%)</title><rect x="67.5676%" y="229" width="2.7027%" height="15" fill="rgb(215,215,53)" fg:x="25" fg:w="1"/><text x="67.8176%" y="239.50">ha..</text></g><g><title>mysql::io::Stream::connect_socket (1 samples, 2.70%)</title><rect x="70.2703%" y="229" width="2.7027%" height="15" fill="rgb(223,4,10)" fg:x="26" fg:w="1"/><text x="70.5203%" y="239.50">my..</text></g><g><title>std::os::unix::net::stream::UnixStream::connect (1 samples, 2.70%)</title><rect x="70.2703%" y="213" width="2.7027%" height="15" fill="rgb(234,103,6)" fg:x="26" fg:w="1"/><text x="70.5203%" y="223.50">st..</text></g><g><title>std::sys::net::connection::socket::unix::Socket::new_raw (1 samples, 2.70%)</title><rect x="70.2703%" y="197" width="2.7027%" height="15" fill="rgb(227,97,0)" fg:x="26" fg:w="1"/><text x="70.5203%" y="207.50">st..</text></g><g><title>socket (1 samples, 2.70%)</title><rect x="70.2703%" y="181" width="2.7027%" height="15" fill="rgb(234,150,53)" fg:x="26" fg:w="1"/><text x="70.5203%" y="191.50">so..</text></g><g><title>socket2::socket::Socket::connect (1 samples, 2.70%)</title><rect x="72.9730%" y="181" width="2.7027%" height="15" fill="rgb(228,201,54)" fg:x="27" fg:w="1"/><text x="73.2230%" y="191.50">so..</text></g><g><title>__connect (1 samples, 2.70%)</title><rect x="72.9730%" y="165" width="2.7027%" height="15" fill="rgb(222,22,37)" fg:x="27" fg:w="1"/><text x="73.2230%" y="175.50">__..</text></g><g><title>dingo_test_runner::tester::database::MySQLDatabase::new (4 samples, 10.81%)</title><rect x="67.5676%" y="325" width="10.8108%" height="15" fill="rgb(237,53,32)" fg:x="25" fg:w="4"/><text x="67.8176%" y="335.50">dingo_test_runne..</text></g><g><title>mysql::conn::pool::Pool::new (4 samples, 10.81%)</title><rect x="67.5676%" y="309" width="10.8108%" height="15" fill="rgb(233,25,53)" fg:x="25" fg:w="4"/><text x="67.8176%" y="319.50">mysql::conn::poo..</text></g><g><title>mysql::conn::pool::inner::Inner::new (4 samples, 10.81%)</title><rect x="67.5676%" y="293" width="10.8108%" height="15" fill="rgb(210,40,34)" fg:x="25" fg:w="4"/><text x="67.8176%" y="303.50">mysql::conn::poo..</text></g><g><title>mysql::conn::pool::inner::Protected::new_conn (4 samples, 10.81%)</title><rect x="67.5676%" y="277" width="10.8108%" height="15" fill="rgb(241,220,44)" fg:x="25" fg:w="4"/><text x="67.8176%" y="287.50">mysql::conn::poo..</text></g><g><title>mysql::conn::Conn::new (4 samples, 10.81%)</title><rect x="67.5676%" y="261" width="10.8108%" height="15" fill="rgb(235,28,35)" fg:x="25" fg:w="4"/><text x="67.8176%" y="271.50">mysql::conn::Con..</text></g><g><title>mysql::conn::Conn::connect_stream (3 samples, 8.11%)</title><rect x="70.2703%" y="245" width="8.1081%" height="15" fill="rgb(210,56,17)" fg:x="26" fg:w="3"/><text x="70.5203%" y="255.50">mysql::conn..</text></g><g><title>mysql::io::Stream::connect_tcp (2 samples, 5.41%)</title><rect x="72.9730%" y="229" width="5.4054%" height="15" fill="rgb(224,130,29)" fg:x="27" fg:w="2"/><text x="73.2230%" y="239.50">mysql::..</text></g><g><title>mysql::io::tcp::MyTcpBuilder&lt;T&gt;::connect (2 samples, 5.41%)</title><rect x="72.9730%" y="213" width="5.4054%" height="15" fill="rgb(235,212,8)" fg:x="27" fg:w="2"/><text x="73.2230%" y="223.50">mysql::..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 5.41%)</title><rect x="72.9730%" y="197" width="5.4054%" height="15" fill="rgb(223,33,50)" fg:x="27" fg:w="2"/><text x="73.2230%" y="207.50">&lt;alloc:..</text></g><g><title>socket2::socket::Socket::new (1 samples, 2.70%)</title><rect x="75.6757%" y="181" width="2.7027%" height="15" fill="rgb(219,149,13)" fg:x="28" fg:w="1"/><text x="75.9257%" y="191.50">so..</text></g><g><title>socket (1 samples, 2.70%)</title><rect x="75.6757%" y="165" width="2.7027%" height="15" fill="rgb(250,156,29)" fg:x="28" fg:w="1"/><text x="75.9257%" y="175.50">so..</text></g><g><title>dingo_test_runner::tester::tester::Tester::new (5 samples, 13.51%)</title><rect x="67.5676%" y="357" width="13.5135%" height="15" fill="rgb(216,193,19)" fg:x="25" fg:w="5"/><text x="67.8176%" y="367.50">dingo_test_runner::t..</text></g><g><title>dingo_test_runner::tester::connection_manager::ConnectionManager::new (5 samples, 13.51%)</title><rect x="67.5676%" y="341" width="13.5135%" height="15" fill="rgb(216,135,14)" fg:x="25" fg:w="5"/><text x="67.8176%" y="351.50">dingo_test_runner::t..</text></g><g><title>dingo_test_runner::tester::database::create_database_with_retry (1 samples, 2.70%)</title><rect x="78.3784%" y="325" width="2.7027%" height="15" fill="rgb(241,47,5)" fg:x="29" fg:w="1"/><text x="78.6284%" y="335.50">di..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;mysql::conn::pool::PooledConn&gt;&gt; (1 samples, 2.70%)</title><rect x="81.0811%" y="325" width="2.7027%" height="15" fill="rgb(233,42,35)" fg:x="30" fg:w="1"/><text x="81.3311%" y="335.50">co..</text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 2.70%)</title><rect x="81.0811%" y="309" width="2.7027%" height="15" fill="rgb(231,13,6)" fg:x="30" fg:w="1"/><text x="81.3311%" y="319.50">&lt;a..</text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 2.70%)</title><rect x="81.0811%" y="293" width="2.7027%" height="15" fill="rgb(207,181,40)" fg:x="30" fg:w="1"/><text x="81.3311%" y="303.50">al..</text></g><g><title>dingo_test_runner::tester::tester::Tester::post_process (2 samples, 5.41%)</title><rect x="81.0811%" y="357" width="5.4054%" height="15" fill="rgb(254,173,49)" fg:x="30" fg:w="2"/><text x="81.3311%" y="367.50">dingo_t..</text></g><g><title>dingo_test_runner::tester::database::MySQLDatabase::cleanup_after_test (2 samples, 5.41%)</title><rect x="81.0811%" y="341" width="5.4054%" height="15" fill="rgb(221,1,38)" fg:x="30" fg:w="2"/><text x="81.3311%" y="351.50">dingo_t..</text></g><g><title>dingo_test_runner::tester::database::MySQLDatabase::query (1 samples, 2.70%)</title><rect x="83.7838%" y="325" width="2.7027%" height="15" fill="rgb(206,124,46)" fg:x="31" fg:w="1"/><text x="84.0338%" y="335.50">di..</text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (1 samples, 2.70%)</title><rect x="83.7838%" y="309" width="2.7027%" height="15" fill="rgb(249,21,11)" fg:x="31" fg:w="1"/><text x="84.0338%" y="319.50">&lt;m..</text></g><g><title>mysql::conn::Conn::_query (1 samples, 2.70%)</title><rect x="83.7838%" y="293" width="2.7027%" height="15" fill="rgb(222,201,40)" fg:x="31" fg:w="1"/><text x="84.0338%" y="303.50">my..</text></g><g><title>mysql::conn::Conn::write_command (1 samples, 2.70%)</title><rect x="83.7838%" y="277" width="2.7027%" height="15" fill="rgb(235,61,29)" fg:x="31" fg:w="1"/><text x="84.0338%" y="287.50">my..</text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::send (1 samples, 2.70%)</title><rect x="83.7838%" y="261" width="2.7027%" height="15" fill="rgb(219,207,3)" fg:x="31" fg:w="1"/><text x="84.0338%" y="271.50">my..</text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (1 samples, 2.70%)</title><rect x="83.7838%" y="245" width="2.7027%" height="15" fill="rgb(222,56,46)" fg:x="31" fg:w="1"/><text x="84.0338%" y="255.50">st..</text></g><g><title>std::net::udp::UdpSocket::send (1 samples, 2.70%)</title><rect x="83.7838%" y="229" width="2.7027%" height="15" fill="rgb(239,76,54)" fg:x="31" fg:w="1"/><text x="84.0338%" y="239.50">st..</text></g><g><title>__sendto (1 samples, 2.70%)</title><rect x="83.7838%" y="213" width="2.7027%" height="15" fill="rgb(231,124,27)" fg:x="31" fg:w="1"/><text x="84.0338%" y="223.50">__..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;mysql::conn::pool::PooledConn&gt;&gt; (1 samples, 2.70%)</title><rect x="86.4865%" y="325" width="2.7027%" height="15" fill="rgb(249,195,6)" fg:x="32" fg:w="1"/><text x="86.7365%" y="335.50">co..</text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 2.70%)</title><rect x="86.4865%" y="309" width="2.7027%" height="15" fill="rgb(237,174,47)" fg:x="32" fg:w="1"/><text x="86.7365%" y="319.50">&lt;a..</text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 2.70%)</title><rect x="86.4865%" y="293" width="2.7027%" height="15" fill="rgb(206,201,31)" fg:x="32" fg:w="1"/><text x="86.7365%" y="303.50">al..</text></g><g><title>&lt;alloc::collections::vec_deque::VecDeque&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 2.70%)</title><rect x="86.4865%" y="277" width="2.7027%" height="15" fill="rgb(231,57,52)" fg:x="32" fg:w="1"/><text x="86.7365%" y="287.50">&lt;a..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;mysql::conn::ConnInner&gt;&gt; (1 samples, 2.70%)</title><rect x="86.4865%" y="261" width="2.7027%" height="15" fill="rgb(248,177,22)" fg:x="32" fg:w="1"/><text x="86.7365%" y="271.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;mysql_common::proto::sync_framed::MySyncFramed&lt;mysql::io::Stream&gt;&gt;&gt; (1 samples, 2.70%)</title><rect x="86.4865%" y="245" width="2.7027%" height="15" fill="rgb(215,211,37)" fg:x="32" fg:w="1"/><text x="86.7365%" y="255.50">co..</text></g><g><title>free_medium (1 samples, 2.70%)</title><rect x="86.4865%" y="229" width="2.7027%" height="15" fill="rgb(241,128,51)" fg:x="32" fg:w="1"/><text x="86.7365%" y="239.50">fr..</text></g><g><title>mvm_madvise_free_plat (1 samples, 2.70%)</title><rect x="86.4865%" y="213" width="2.7027%" height="15" fill="rgb(227,165,31)" fg:x="32" fg:w="1"/><text x="86.7365%" y="223.50">mv..</text></g><g><title>madvise (1 samples, 2.70%)</title><rect x="86.4865%" y="197" width="2.7027%" height="15" fill="rgb(228,167,24)" fg:x="32" fg:w="1"/><text x="86.7365%" y="207.50">ma..</text></g><g><title>mysql::conn::Conn::connect (1 samples, 2.70%)</title><rect x="89.1892%" y="245" width="2.7027%" height="15" fill="rgb(228,143,12)" fg:x="33" fg:w="1"/><text x="89.4392%" y="255.50">my..</text></g><g><title>mysql::conn::Conn::get_system_var (1 samples, 2.70%)</title><rect x="89.1892%" y="229" width="2.7027%" height="15" fill="rgb(249,149,8)" fg:x="33" fg:w="1"/><text x="89.4392%" y="239.50">my..</text></g><g><title>&lt;mysql::conn::Conn as mysql::conn::queryable::Queryable&gt;::query_iter (1 samples, 2.70%)</title><rect x="89.1892%" y="213" width="2.7027%" height="15" fill="rgb(243,35,44)" fg:x="33" fg:w="1"/><text x="89.4392%" y="223.50">&lt;m..</text></g><g><title>mysql::conn::Conn::handle_result_set (1 samples, 2.70%)</title><rect x="89.1892%" y="197" width="2.7027%" height="15" fill="rgb(246,89,9)" fg:x="33" fg:w="1"/><text x="89.4392%" y="207.50">my..</text></g><g><title>mysql::conn::Conn::read_packet (1 samples, 2.70%)</title><rect x="89.1892%" y="181" width="2.7027%" height="15" fill="rgb(233,213,13)" fg:x="33" fg:w="1"/><text x="89.4392%" y="191.50">my..</text></g><g><title>mysql_common::proto::sync_framed::MySyncFramed&lt;T&gt;::next_packet (1 samples, 2.70%)</title><rect x="89.1892%" y="165" width="2.7027%" height="15" fill="rgb(233,141,41)" fg:x="33" fg:w="1"/><text x="89.4392%" y="175.50">my..</text></g><g><title>std::os::unix::net::datagram::UnixDatagram::recv (1 samples, 2.70%)</title><rect x="89.1892%" y="149" width="2.7027%" height="15" fill="rgb(239,167,4)" fg:x="33" fg:w="1"/><text x="89.4392%" y="159.50">st..</text></g><g><title>__recvfrom (1 samples, 2.70%)</title><rect x="89.1892%" y="133" width="2.7027%" height="15" fill="rgb(209,217,16)" fg:x="33" fg:w="1"/><text x="89.4392%" y="143.50">__..</text></g><g><title>mysql::io::Stream::connect_socket (1 samples, 2.70%)</title><rect x="91.8919%" y="229" width="2.7027%" height="15" fill="rgb(219,88,35)" fg:x="34" fg:w="1"/><text x="92.1419%" y="239.50">my..</text></g><g><title>std::os::unix::net::stream::UnixStream::connect (1 samples, 2.70%)</title><rect x="91.8919%" y="213" width="2.7027%" height="15" fill="rgb(220,193,23)" fg:x="34" fg:w="1"/><text x="92.1419%" y="223.50">st..</text></g><g><title>close (1 samples, 2.70%)</title><rect x="91.8919%" y="197" width="2.7027%" height="15" fill="rgb(230,90,52)" fg:x="34" fg:w="1"/><text x="92.1419%" y="207.50">cl..</text></g><g><title>all (37 samples, 100%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(252,106,19)" fg:x="0" fg:w="37"/><text x="0.2500%" y="543.50"></text></g><g><title>thread_start (27 samples, 72.97%)</title><rect x="27.0270%" y="517" width="72.9730%" height="15" fill="rgb(206,74,20)" fg:x="10" fg:w="27"/><text x="27.2770%" y="527.50">thread_start</text></g><g><title>_pthread_start (27 samples, 72.97%)</title><rect x="27.0270%" y="501" width="72.9730%" height="15" fill="rgb(230,138,44)" fg:x="10" fg:w="27"/><text x="27.2770%" y="511.50">_pthread_start</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (27 samples, 72.97%)</title><rect x="27.0270%" y="485" width="72.9730%" height="15" fill="rgb(235,182,43)" fg:x="10" fg:w="27"/><text x="27.2770%" y="495.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (27 samples, 72.97%)</title><rect x="27.0270%" y="469" width="72.9730%" height="15" fill="rgb(242,16,51)" fg:x="10" fg:w="27"/><text x="27.2770%" y="479.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (27 samples, 72.97%)</title><rect x="27.0270%" y="453" width="72.9730%" height="15" fill="rgb(248,9,4)" fg:x="10" fg:w="27"/><text x="27.2770%" y="463.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>rayon_core::registry::ThreadBuilder::run (27 samples, 72.97%)</title><rect x="27.0270%" y="437" width="72.9730%" height="15" fill="rgb(210,31,22)" fg:x="10" fg:w="27"/><text x="27.2770%" y="447.50">rayon_core::registry::ThreadBuilder::run</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (27 samples, 72.97%)</title><rect x="27.0270%" y="421" width="72.9730%" height="15" fill="rgb(239,54,39)" fg:x="10" fg:w="27"/><text x="27.2770%" y="431.50">rayon_core::registry::WorkerThread::wait_until_cold</text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::_{{closure}} (13 samples, 35.14%)</title><rect x="64.8649%" y="405" width="35.1351%" height="15" fill="rgb(230,99,41)" fg:x="24" fg:w="13"/><text x="65.1149%" y="415.50">rayon::iter::plumbing::bridge_producer_consumer::helper::..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (13 samples, 35.14%)</title><rect x="64.8649%" y="389" width="35.1351%" height="15" fill="rgb(253,106,12)" fg:x="24" fg:w="13"/><text x="65.1149%" y="399.50">core::iter::traits::iterator::Iterator::for_each::call::_..</text></g><g><title>dingo_test_runner::executor::file_executor::FileExecutor::execute_single_test (13 samples, 35.14%)</title><rect x="64.8649%" y="373" width="35.1351%" height="15" fill="rgb(213,46,41)" fg:x="24" fg:w="13"/><text x="65.1149%" y="383.50">dingo_test_runner::executor::file_executor::FileExecutor:..</text></g><g><title>dingo_test_runner::tester::tester::Tester::pre_process (5 samples, 13.51%)</title><rect x="86.4865%" y="357" width="13.5135%" height="15" fill="rgb(215,133,35)" fg:x="32" fg:w="5"/><text x="86.7365%" y="367.50">dingo_test_runner::t..</text></g><g><title>dingo_test_runner::tester::database::MySQLDatabase::init_for_test (5 samples, 13.51%)</title><rect x="86.4865%" y="341" width="13.5135%" height="15" fill="rgb(213,28,5)" fg:x="32" fg:w="5"/><text x="86.7365%" y="351.50">dingo_test_runner::t..</text></g><g><title>dingo_test_runner::tester::database::MySQLDatabase::switch_database (4 samples, 10.81%)</title><rect x="89.1892%" y="325" width="10.8108%" height="15" fill="rgb(215,77,49)" fg:x="33" fg:w="4"/><text x="89.4392%" y="335.50">dingo_test_runne..</text></g><g><title>mysql::conn::pool::Pool::new (4 samples, 10.81%)</title><rect x="89.1892%" y="309" width="10.8108%" height="15" fill="rgb(248,100,22)" fg:x="33" fg:w="4"/><text x="89.4392%" y="319.50">mysql::conn::poo..</text></g><g><title>mysql::conn::pool::inner::Inner::new (4 samples, 10.81%)</title><rect x="89.1892%" y="293" width="10.8108%" height="15" fill="rgb(208,67,9)" fg:x="33" fg:w="4"/><text x="89.4392%" y="303.50">mysql::conn::poo..</text></g><g><title>mysql::conn::pool::inner::Protected::new_conn (4 samples, 10.81%)</title><rect x="89.1892%" y="277" width="10.8108%" height="15" fill="rgb(219,133,21)" fg:x="33" fg:w="4"/><text x="89.4392%" y="287.50">mysql::conn::poo..</text></g><g><title>mysql::conn::Conn::new (4 samples, 10.81%)</title><rect x="89.1892%" y="261" width="10.8108%" height="15" fill="rgb(246,46,29)" fg:x="33" fg:w="4"/><text x="89.4392%" y="271.50">mysql::conn::Con..</text></g><g><title>mysql::conn::Conn::connect_stream (3 samples, 8.11%)</title><rect x="91.8919%" y="245" width="8.1081%" height="15" fill="rgb(246,185,52)" fg:x="34" fg:w="3"/><text x="92.1419%" y="255.50">mysql::conn..</text></g><g><title>mysql::io::Stream::connect_tcp (2 samples, 5.41%)</title><rect x="94.5946%" y="229" width="5.4054%" height="15" fill="rgb(252,136,11)" fg:x="35" fg:w="2"/><text x="94.8446%" y="239.50">mysql::..</text></g><g><title>mysql::io::tcp::MyTcpBuilder&lt;T&gt;::connect (2 samples, 5.41%)</title><rect x="94.5946%" y="213" width="5.4054%" height="15" fill="rgb(219,138,53)" fg:x="35" fg:w="2"/><text x="94.8446%" y="223.50">mysql::..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 5.41%)</title><rect x="94.5946%" y="197" width="5.4054%" height="15" fill="rgb(211,51,23)" fg:x="35" fg:w="2"/><text x="94.8446%" y="207.50">&lt;alloc:..</text></g><g><title>socket2::socket::Socket::connect (2 samples, 5.41%)</title><rect x="94.5946%" y="181" width="5.4054%" height="15" fill="rgb(247,221,28)" fg:x="35" fg:w="2"/><text x="94.8446%" y="191.50">socket2..</text></g><g><title>__connect (2 samples, 5.41%)</title><rect x="94.5946%" y="165" width="5.4054%" height="15" fill="rgb(251,222,45)" fg:x="35" fg:w="2"/><text x="94.8446%" y="175.50">__conne..</text></g></svg></svg>